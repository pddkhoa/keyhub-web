import {
  __commonJS
} from "./chunk-ROME4SDB.js";

// node_modules/editorjs-html/build/edjsHTML.node.js
var require_edjsHTML_node = __commonJS({
  "node_modules/editorjs-html/build/edjsHTML.node.js"(exports, module) {
    var e = ["left", "right", "center", "justify"];
    var t = { delimiter: function() {
      return "<br/>";
    }, header: function(e2) {
      var t2 = e2.data;
      return "<h" + t2.level + ">" + t2.text + "</h" + t2.level + ">";
    }, paragraph: function(t2) {
      var r2 = t2.data, n2 = r2.alignment || r2.align;
      return void 0 !== n2 && e.includes(n2) ? '<p style="text-align:' + n2 + ';">' + r2.text + "</p>" : "<p>" + r2.text + "</p>";
    }, list: function(e2) {
      var t2 = e2.data, r2 = "unordered" === t2.style ? "ul" : "ol", n2 = function(e3, t3) {
        var r3 = e3.map(function(e4) {
          if (!e4.content && !e4.items)
            return "<li>" + e4 + "</li>";
          var r4 = "";
          return e4.items && (r4 = n2(e4.items, t3)), e4.content ? "<li> " + e4.content + " </li>" + r4 : void 0;
        });
        return "<" + t3 + ">" + r3.join("") + "</" + t3 + ">";
      };
      return n2(t2.items, r2);
    }, image: function(e2) {
      var t2 = e2.data, r2 = t2.caption ? t2.caption : "Image";
      return '<img src="' + (t2.file && t2.file.url ? t2.file.url : t2.url) + '" alt="' + r2 + '" />';
    }, quote: function(e2) {
      var t2 = e2.data;
      return "<blockquote>" + t2.text + "</blockquote> - " + t2.caption;
    }, code: function(e2) {
      return "<pre><code>" + e2.data.code + "</code></pre>";
    }, embed: function(e2) {
      var t2 = e2.data;
      switch (t2.service) {
        case "vimeo":
          return '<iframe src="' + t2.embed + '" height="' + t2.height + '" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen></iframe>';
        case "youtube":
          return '<iframe width="' + t2.width + '" height="' + t2.height + '" src="' + t2.embed + '" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>';
        default:
          throw new Error("Only Youtube and Vime Embeds are supported right now.");
      }
    } };
    function r(e2) {
      return new Error('\x1B[31m The Parser function of type "' + e2 + '" is not defined. \n\n  Define your custom parser functions as: \x1B[34mhttps://github.com/pavittarx/editorjs-html#extend-for-custom-blocks \x1B[0m');
    }
    var n = function(e2) {
      void 0 === e2 && (e2 = {});
      var i = Object.assign({}, t, e2);
      return { parse: function(e3) {
        return e3.blocks.map(function(e4) {
          return i[e4.type] ? i[e4.type](e4) : r(e4.type);
        });
      }, parseBlock: function(e3) {
        return i[e3.type] ? i[e3.type](e3) : r(e3.type);
      }, parseStrict: function(e3) {
        var t2 = e3.blocks, o = n(i).validate({ blocks: t2 });
        if (o.length)
          throw new Error("Parser Functions missing for blocks: " + o.toString());
        for (var a = [], u = 0; u < t2.length; u++) {
          if (!i[t2[u].type])
            throw r(t2[u].type);
          a.push(i[t2[u].type](t2[u]));
        }
        return a;
      }, validate: function(e3) {
        var t2 = e3.blocks.map(function(e4) {
          return e4.type;
        }).filter(function(e4, t3, r3) {
          return r3.indexOf(e4) === t3;
        }), r2 = Object.keys(i);
        return t2.filter(function(e4) {
          return !r2.includes(e4);
        });
      } };
    };
    module.exports = n;
  }
});
export default require_edjsHTML_node();
//# sourceMappingURL=editorjs-html.js.map
