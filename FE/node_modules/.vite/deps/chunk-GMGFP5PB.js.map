{
  "version": 3,
  "sources": ["../../@radix-ui/react-arrow/dist/packages/react/arrow/src/index.ts", "../../@radix-ui/react-arrow/dist/packages/react/arrow/src/Arrow.tsx", "../../@radix-ui/react-popper/dist/packages/react/popper/src/index.ts", "../../@radix-ui/react-popper/dist/packages/react/popper/src/Popper.tsx", "../../@radix-ui/react-portal/dist/packages/react/portal/src/index.ts", "../../@radix-ui/react-portal/dist/packages/react/portal/src/Portal.tsx", "../../@radix-ui/react-use-escape-keydown/dist/packages/react/use-escape-keydown/src/index.ts", "../../@radix-ui/react-use-escape-keydown/dist/packages/react/use-escape-keydown/src/useEscapeKeydown.tsx", "../../@radix-ui/react-dismissable-layer/dist/packages/react/dismissable-layer/src/index.ts", "../../@radix-ui/react-dismissable-layer/dist/packages/react/dismissable-layer/src/DismissableLayer.tsx"],
  "sourcesContent": ["export {\n  Arrow,\n  //\n  Root,\n} from './Arrow';\nexport type { ArrowProps } from './Arrow';\n", "import * as React from 'react';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type * as Radix from '@radix-ui/react-primitive';\n\n/* -------------------------------------------------------------------------------------------------\n * Arrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst NAME = 'Arrow';\n\ntype ArrowElement = React.ElementRef<typeof Primitive.svg>;\ntype PrimitiveSvgProps = Radix.ComponentPropsWithoutRef<typeof Primitive.svg>;\ninterface ArrowProps extends PrimitiveSvgProps {}\n\nconst Arrow = React.forwardRef<ArrowElement, ArrowProps>((props, forwardedRef) => {\n  const { children, width = 10, height = 5, ...arrowProps } = props;\n  return (\n    <Primitive.svg\n      {...arrowProps}\n      ref={forwardedRef}\n      width={width}\n      height={height}\n      viewBox=\"0 0 30 10\"\n      preserveAspectRatio=\"none\"\n    >\n      {/* We use their children if they're slotting to replace the whole svg */}\n      {props.asChild ? children : <polygon points=\"0,0 30,0 15,10\" />}\n    </Primitive.svg>\n  );\n});\n\nArrow.displayName = NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = Arrow;\n\nexport {\n  Arrow,\n  //\n  Root,\n};\nexport type { ArrowProps };\n", "export {\n  createPopperScope,\n  //\n  Popper,\n  PopperAnchor,\n  PopperContent,\n  PopperArrow,\n  //\n  Root,\n  Anchor,\n  Content,\n  Arrow,\n  //\n  SIDE_OPTIONS,\n  ALIGN_OPTIONS,\n} from './Popper';\nexport type {\n  PopperProps,\n  PopperAnchorProps,\n  PopperContentProps,\n  PopperArrowProps,\n} from './Popper';\n", "import * as React from 'react';\nimport {\n  useFloating,\n  autoUpdate,\n  offset,\n  shift,\n  limitShift,\n  hide,\n  arrow as floatingUIarrow,\n  flip,\n  size,\n} from '@floating-ui/react-dom';\nimport * as ArrowPrimitive from '@radix-ui/react-arrow';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { useSize } from '@radix-ui/react-use-size';\n\nimport type { Placement, Middleware } from '@floating-ui/react-dom';\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\nimport type { Measurable } from '@radix-ui/rect';\n\nconst SIDE_OPTIONS = ['top', 'right', 'bottom', 'left'] as const;\nconst ALIGN_OPTIONS = ['start', 'center', 'end'] as const;\n\ntype Side = typeof SIDE_OPTIONS[number];\ntype Align = typeof ALIGN_OPTIONS[number];\n\n/* -------------------------------------------------------------------------------------------------\n * Popper\n * -----------------------------------------------------------------------------------------------*/\n\nconst POPPER_NAME = 'Popper';\n\ntype ScopedProps<P> = P & { __scopePopper?: Scope };\nconst [createPopperContext, createPopperScope] = createContextScope(POPPER_NAME);\n\ntype PopperContextValue = {\n  anchor: Measurable | null;\n  onAnchorChange(anchor: Measurable | null): void;\n};\nconst [PopperProvider, usePopperContext] = createPopperContext<PopperContextValue>(POPPER_NAME);\n\ninterface PopperProps {\n  children?: React.ReactNode;\n}\nconst Popper: React.FC<PopperProps> = (props: ScopedProps<PopperProps>) => {\n  const { __scopePopper, children } = props;\n  const [anchor, setAnchor] = React.useState<Measurable | null>(null);\n  return (\n    <PopperProvider scope={__scopePopper} anchor={anchor} onAnchorChange={setAnchor}>\n      {children}\n    </PopperProvider>\n  );\n};\n\nPopper.displayName = POPPER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopperAnchor\n * -----------------------------------------------------------------------------------------------*/\n\nconst ANCHOR_NAME = 'PopperAnchor';\n\ntype PopperAnchorElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface PopperAnchorProps extends PrimitiveDivProps {\n  virtualRef?: React.RefObject<Measurable>;\n}\n\nconst PopperAnchor = React.forwardRef<PopperAnchorElement, PopperAnchorProps>(\n  (props: ScopedProps<PopperAnchorProps>, forwardedRef) => {\n    const { __scopePopper, virtualRef, ...anchorProps } = props;\n    const context = usePopperContext(ANCHOR_NAME, __scopePopper);\n    const ref = React.useRef<PopperAnchorElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n\n    React.useEffect(() => {\n      // Consumer can anchor the popper to something that isn't\n      // a DOM node e.g. pointer position, so we override the\n      // `anchorRef` with their virtual ref in this case.\n      context.onAnchorChange(virtualRef?.current || ref.current);\n    });\n\n    return virtualRef ? null : <Primitive.div {...anchorProps} ref={composedRefs} />;\n  }\n);\n\nPopperAnchor.displayName = ANCHOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopperContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'PopperContent';\n\ntype PopperContentContextValue = {\n  placedSide: Side;\n  onArrowChange(arrow: HTMLSpanElement | null): void;\n  arrowX?: number;\n  arrowY?: number;\n  shouldHideArrow: boolean;\n};\n\nconst [PopperContentProvider, useContentContext] =\n  createPopperContext<PopperContentContextValue>(CONTENT_NAME);\n\ntype Boundary = Element | null;\n\ntype PopperContentElement = React.ElementRef<typeof Primitive.div>;\ninterface PopperContentProps extends PrimitiveDivProps {\n  side?: Side;\n  sideOffset?: number;\n  align?: Align;\n  alignOffset?: number;\n  arrowPadding?: number;\n  collisionBoundary?: Boundary | Boundary[];\n  collisionPadding?: number | Partial<Record<Side, number>>;\n  sticky?: 'partial' | 'always';\n  hideWhenDetached?: boolean;\n  avoidCollisions?: boolean;\n  onPlaced?: () => void;\n}\n\nconst PopperContent = React.forwardRef<PopperContentElement, PopperContentProps>(\n  (props: ScopedProps<PopperContentProps>, forwardedRef) => {\n    const {\n      __scopePopper,\n      side = 'bottom',\n      sideOffset = 0,\n      align = 'center',\n      alignOffset = 0,\n      arrowPadding = 0,\n      collisionBoundary = [],\n      collisionPadding: collisionPaddingProp = 0,\n      sticky = 'partial',\n      hideWhenDetached = false,\n      avoidCollisions = true,\n      onPlaced,\n      ...contentProps\n    } = props;\n\n    const context = usePopperContext(CONTENT_NAME, __scopePopper);\n\n    const [content, setContent] = React.useState<HTMLDivElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setContent(node));\n\n    const [arrow, setArrow] = React.useState<HTMLSpanElement | null>(null);\n    const arrowSize = useSize(arrow);\n    const arrowWidth = arrowSize?.width ?? 0;\n    const arrowHeight = arrowSize?.height ?? 0;\n\n    const desiredPlacement = (side + (align !== 'center' ? '-' + align : '')) as Placement;\n\n    const collisionPadding =\n      typeof collisionPaddingProp === 'number'\n        ? collisionPaddingProp\n        : { top: 0, right: 0, bottom: 0, left: 0, ...collisionPaddingProp };\n\n    const boundary = Array.isArray(collisionBoundary) ? collisionBoundary : [collisionBoundary];\n    const hasExplicitBoundaries = boundary.length > 0;\n\n    const detectOverflowOptions = {\n      padding: collisionPadding,\n      boundary: boundary.filter(isNotNull),\n      // with `strategy: 'fixed'`, this is the only way to get it to respect boundaries\n      altBoundary: hasExplicitBoundaries,\n    };\n\n    const { refs, floatingStyles, placement, isPositioned, middlewareData } = useFloating({\n      // default to `fixed` strategy so users don't have to pick and we also avoid focus scroll issues\n      strategy: 'fixed',\n      placement: desiredPlacement,\n      whileElementsMounted: autoUpdate,\n      elements: {\n        reference: context.anchor,\n      },\n      middleware: [\n        offset({ mainAxis: sideOffset + arrowHeight, alignmentAxis: alignOffset }),\n        avoidCollisions &&\n          shift({\n            mainAxis: true,\n            crossAxis: false,\n            limiter: sticky === 'partial' ? limitShift() : undefined,\n            ...detectOverflowOptions,\n          }),\n        avoidCollisions && flip({ ...detectOverflowOptions }),\n        size({\n          ...detectOverflowOptions,\n          apply: ({ elements, rects, availableWidth, availableHeight }) => {\n            const { width: anchorWidth, height: anchorHeight } = rects.reference;\n            const contentStyle = elements.floating.style;\n            contentStyle.setProperty('--radix-popper-available-width', `${availableWidth}px`);\n            contentStyle.setProperty('--radix-popper-available-height', `${availableHeight}px`);\n            contentStyle.setProperty('--radix-popper-anchor-width', `${anchorWidth}px`);\n            contentStyle.setProperty('--radix-popper-anchor-height', `${anchorHeight}px`);\n          },\n        }),\n        arrow && floatingUIarrow({ element: arrow, padding: arrowPadding }),\n        transformOrigin({ arrowWidth, arrowHeight }),\n        hideWhenDetached && hide({ strategy: 'referenceHidden' }),\n      ],\n    });\n\n    const [placedSide, placedAlign] = getSideAndAlignFromPlacement(placement);\n\n    const handlePlaced = useCallbackRef(onPlaced);\n    useLayoutEffect(() => {\n      if (isPositioned) {\n        handlePlaced?.();\n      }\n    }, [isPositioned, handlePlaced]);\n\n    const arrowX = middlewareData.arrow?.x;\n    const arrowY = middlewareData.arrow?.y;\n    const cannotCenterArrow = middlewareData.arrow?.centerOffset !== 0;\n\n    const [contentZIndex, setContentZIndex] = React.useState<string>();\n    useLayoutEffect(() => {\n      if (content) setContentZIndex(window.getComputedStyle(content).zIndex);\n    }, [content]);\n\n    return (\n      <div\n        ref={refs.setFloating}\n        data-radix-popper-content-wrapper=\"\"\n        style={{\n          ...floatingStyles,\n          transform: isPositioned ? floatingStyles.transform : 'translate(0, -200%)', // keep off the page when measuring\n          minWidth: 'max-content',\n          zIndex: contentZIndex,\n          ['--radix-popper-transform-origin' as any]: [\n            middlewareData.transformOrigin?.x,\n            middlewareData.transformOrigin?.y,\n          ].join(' '),\n        }}\n        // Floating UI interally calculates logical alignment based the `dir` attribute on\n        // the reference/floating node, we must add this attribute here to ensure\n        // this is calculated when portalled as well as inline.\n        dir={props.dir}\n      >\n        <PopperContentProvider\n          scope={__scopePopper}\n          placedSide={placedSide}\n          onArrowChange={setArrow}\n          arrowX={arrowX}\n          arrowY={arrowY}\n          shouldHideArrow={cannotCenterArrow}\n        >\n          <Primitive.div\n            data-side={placedSide}\n            data-align={placedAlign}\n            {...contentProps}\n            ref={composedRefs}\n            style={{\n              ...contentProps.style,\n              // if the PopperContent hasn't been placed yet (not all measurements done)\n              // we prevent animations so that users's animation don't kick in too early referring wrong sides\n              animation: !isPositioned ? 'none' : undefined,\n              // hide the content if using the hide middleware and should be hidden\n              opacity: middlewareData.hide?.referenceHidden ? 0 : undefined,\n            }}\n          />\n        </PopperContentProvider>\n      </div>\n    );\n  }\n);\n\nPopperContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopperArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'PopperArrow';\n\nconst OPPOSITE_SIDE: Record<Side, Side> = {\n  top: 'bottom',\n  right: 'left',\n  bottom: 'top',\n  left: 'right',\n};\n\ntype PopperArrowElement = React.ElementRef<typeof ArrowPrimitive.Root>;\ntype ArrowProps = Radix.ComponentPropsWithoutRef<typeof ArrowPrimitive.Root>;\ninterface PopperArrowProps extends ArrowProps {}\n\nconst PopperArrow = React.forwardRef<PopperArrowElement, PopperArrowProps>(function PopperArrow(\n  props: ScopedProps<PopperArrowProps>,\n  forwardedRef\n) {\n  const { __scopePopper, ...arrowProps } = props;\n  const contentContext = useContentContext(ARROW_NAME, __scopePopper);\n  const baseSide = OPPOSITE_SIDE[contentContext.placedSide];\n\n  return (\n    // we have to use an extra wrapper because `ResizeObserver` (used by `useSize`)\n    // doesn't report size as we'd expect on SVG elements.\n    // it reports their bounding box which is effectively the largest path inside the SVG.\n    <span\n      ref={contentContext.onArrowChange}\n      style={{\n        position: 'absolute',\n        left: contentContext.arrowX,\n        top: contentContext.arrowY,\n        [baseSide]: 0,\n        transformOrigin: {\n          top: '',\n          right: '0 0',\n          bottom: 'center 0',\n          left: '100% 0',\n        }[contentContext.placedSide],\n        transform: {\n          top: 'translateY(100%)',\n          right: 'translateY(50%) rotate(90deg) translateX(-50%)',\n          bottom: `rotate(180deg)`,\n          left: 'translateY(50%) rotate(-90deg) translateX(50%)',\n        }[contentContext.placedSide],\n        visibility: contentContext.shouldHideArrow ? 'hidden' : undefined,\n      }}\n    >\n      <ArrowPrimitive.Root\n        {...arrowProps}\n        ref={forwardedRef}\n        style={{\n          ...arrowProps.style,\n          // ensures the element can be measured correctly (mostly for if SVG)\n          display: 'block',\n        }}\n      />\n    </span>\n  );\n});\n\nPopperArrow.displayName = ARROW_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction isNotNull<T>(value: T | null): value is T {\n  return value !== null;\n}\n\nconst transformOrigin = (options: { arrowWidth: number; arrowHeight: number }): Middleware => ({\n  name: 'transformOrigin',\n  options,\n  fn(data) {\n    const { placement, rects, middlewareData } = data;\n\n    const cannotCenterArrow = middlewareData.arrow?.centerOffset !== 0;\n    const isArrowHidden = cannotCenterArrow;\n    const arrowWidth = isArrowHidden ? 0 : options.arrowWidth;\n    const arrowHeight = isArrowHidden ? 0 : options.arrowHeight;\n\n    const [placedSide, placedAlign] = getSideAndAlignFromPlacement(placement);\n    const noArrowAlign = { start: '0%', center: '50%', end: '100%' }[placedAlign];\n\n    const arrowXCenter = (middlewareData.arrow?.x ?? 0) + arrowWidth / 2;\n    const arrowYCenter = (middlewareData.arrow?.y ?? 0) + arrowHeight / 2;\n\n    let x = '';\n    let y = '';\n\n    if (placedSide === 'bottom') {\n      x = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;\n      y = `${-arrowHeight}px`;\n    } else if (placedSide === 'top') {\n      x = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;\n      y = `${rects.floating.height + arrowHeight}px`;\n    } else if (placedSide === 'right') {\n      x = `${-arrowHeight}px`;\n      y = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;\n    } else if (placedSide === 'left') {\n      x = `${rects.floating.width + arrowHeight}px`;\n      y = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;\n    }\n    return { data: { x, y } };\n  },\n});\n\nfunction getSideAndAlignFromPlacement(placement: Placement) {\n  const [side, align = 'center'] = placement.split('-');\n  return [side as Side, align as Align] as const;\n}\n\nconst Root = Popper;\nconst Anchor = PopperAnchor;\nconst Content = PopperContent;\nconst Arrow = PopperArrow;\n\nexport {\n  createPopperScope,\n  //\n  Popper,\n  PopperAnchor,\n  PopperContent,\n  PopperArrow,\n  //\n  Root,\n  Anchor,\n  Content,\n  Arrow,\n  //\n  SIDE_OPTIONS,\n  ALIGN_OPTIONS,\n};\nexport type { PopperProps, PopperAnchorProps, PopperContentProps, PopperArrowProps };\n", "export {\n  Portal,\n  //\n  Root,\n} from './Portal';\nexport type { PortalProps } from './Portal';\n", "import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type * as Radix from '@radix-ui/react-primitive';\n\n/* -------------------------------------------------------------------------------------------------\n * Portal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'Portal';\n\ntype PortalElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface PortalProps extends PrimitiveDivProps {\n  container?: HTMLElement | null;\n}\n\nconst Portal = React.forwardRef<PortalElement, PortalProps>((props, forwardedRef) => {\n  const { container = globalThis?.document?.body, ...portalProps } = props;\n  return container\n    ? ReactDOM.createPortal(<Primitive.div {...portalProps} ref={forwardedRef} />, container)\n    : null;\n});\n\nPortal.displayName = PORTAL_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = Portal;\n\nexport {\n  Portal,\n  //\n  Root,\n};\nexport type { PortalProps };\n", "export { useEscapeKeydown } from './useEscapeKeydown';\n", "import * as React from 'react';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\n\n/**\n * Listens for when the escape key is down\n */\nfunction useEscapeKeydown(\n  onEscapeKeyDownProp?: (event: KeyboardEvent) => void,\n  ownerDocument: Document = globalThis?.document\n) {\n  const onEscapeKeyDown = useCallbackRef(onEscapeKeyDownProp);\n\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        onEscapeKeyDown(event);\n      }\n    };\n    ownerDocument.addEventListener('keydown', handleKeyDown);\n    return () => ownerDocument.removeEventListener('keydown', handleKeyDown);\n  }, [onEscapeKeyDown, ownerDocument]);\n}\n\nexport { useEscapeKeydown };\n", "export {\n  DismissableLayer,\n  DismissableLayerBranch,\n  //\n  Root,\n  Branch,\n} from './DismissableLayer';\nexport type { DismissableLayerProps } from './DismissableLayer';\n", "import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { Primitive, dispatchDiscreteCustomEvent } from '@radix-ui/react-primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useEscapeKeydown } from '@radix-ui/react-use-escape-keydown';\n\nimport type * as Radix from '@radix-ui/react-primitive';\n\n/* -------------------------------------------------------------------------------------------------\n * DismissableLayer\n * -----------------------------------------------------------------------------------------------*/\n\nconst DISMISSABLE_LAYER_NAME = 'DismissableLayer';\nconst CONTEXT_UPDATE = 'dismissableLayer.update';\nconst POINTER_DOWN_OUTSIDE = 'dismissableLayer.pointerDownOutside';\nconst FOCUS_OUTSIDE = 'dismissableLayer.focusOutside';\n\nlet originalBodyPointerEvents: string;\n\nconst DismissableLayerContext = React.createContext({\n  layers: new Set<DismissableLayerElement>(),\n  layersWithOutsidePointerEventsDisabled: new Set<DismissableLayerElement>(),\n  branches: new Set<DismissableLayerBranchElement>(),\n});\n\ntype DismissableLayerElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface DismissableLayerProps extends PrimitiveDivProps {\n  /**\n   * When `true`, hover/focus/click interactions will be disabled on elements outside\n   * the `DismissableLayer`. Users will need to click twice on outside elements to\n   * interact with them: once to close the `DismissableLayer`, and again to trigger the element.\n   */\n  disableOutsidePointerEvents?: boolean;\n  /**\n   * Event handler called when the escape key is down.\n   * Can be prevented.\n   */\n  onEscapeKeyDown?: (event: KeyboardEvent) => void;\n  /**\n   * Event handler called when the a `pointerdown` event happens outside of the `DismissableLayer`.\n   * Can be prevented.\n   */\n  onPointerDownOutside?: (event: PointerDownOutsideEvent) => void;\n  /**\n   * Event handler called when the focus moves outside of the `DismissableLayer`.\n   * Can be prevented.\n   */\n  onFocusOutside?: (event: FocusOutsideEvent) => void;\n  /**\n   * Event handler called when an interaction happens outside the `DismissableLayer`.\n   * Specifically, when a `pointerdown` event happens outside or focus moves outside of it.\n   * Can be prevented.\n   */\n  onInteractOutside?: (event: PointerDownOutsideEvent | FocusOutsideEvent) => void;\n  /**\n   * Handler called when the `DismissableLayer` should be dismissed\n   */\n  onDismiss?: () => void;\n}\n\nconst DismissableLayer = React.forwardRef<DismissableLayerElement, DismissableLayerProps>(\n  (props, forwardedRef) => {\n    const {\n      disableOutsidePointerEvents = false,\n      onEscapeKeyDown,\n      onPointerDownOutside,\n      onFocusOutside,\n      onInteractOutside,\n      onDismiss,\n      ...layerProps\n    } = props;\n    const context = React.useContext(DismissableLayerContext);\n    const [node, setNode] = React.useState<DismissableLayerElement | null>(null);\n    const ownerDocument = node?.ownerDocument ?? globalThis?.document;\n    const [, force] = React.useState({});\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setNode(node));\n    const layers = Array.from(context.layers);\n    const [highestLayerWithOutsidePointerEventsDisabled] = [...context.layersWithOutsidePointerEventsDisabled].slice(-1); // prettier-ignore\n    const highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(highestLayerWithOutsidePointerEventsDisabled); // prettier-ignore\n    const index = node ? layers.indexOf(node) : -1;\n    const isBodyPointerEventsDisabled = context.layersWithOutsidePointerEventsDisabled.size > 0;\n    const isPointerEventsEnabled = index >= highestLayerWithOutsidePointerEventsDisabledIndex;\n\n    const pointerDownOutside = usePointerDownOutside((event) => {\n      const target = event.target as HTMLElement;\n      const isPointerDownOnBranch = [...context.branches].some((branch) => branch.contains(target));\n      if (!isPointerEventsEnabled || isPointerDownOnBranch) return;\n      onPointerDownOutside?.(event);\n      onInteractOutside?.(event);\n      if (!event.defaultPrevented) onDismiss?.();\n    }, ownerDocument);\n\n    const focusOutside = useFocusOutside((event) => {\n      const target = event.target as HTMLElement;\n      const isFocusInBranch = [...context.branches].some((branch) => branch.contains(target));\n      if (isFocusInBranch) return;\n      onFocusOutside?.(event);\n      onInteractOutside?.(event);\n      if (!event.defaultPrevented) onDismiss?.();\n    }, ownerDocument);\n\n    useEscapeKeydown((event) => {\n      const isHighestLayer = index === context.layers.size - 1;\n      if (!isHighestLayer) return;\n      onEscapeKeyDown?.(event);\n      if (!event.defaultPrevented && onDismiss) {\n        event.preventDefault();\n        onDismiss();\n      }\n    }, ownerDocument);\n\n    React.useEffect(() => {\n      if (!node) return;\n      if (disableOutsidePointerEvents) {\n        if (context.layersWithOutsidePointerEventsDisabled.size === 0) {\n          originalBodyPointerEvents = ownerDocument.body.style.pointerEvents;\n          ownerDocument.body.style.pointerEvents = 'none';\n        }\n        context.layersWithOutsidePointerEventsDisabled.add(node);\n      }\n      context.layers.add(node);\n      dispatchUpdate();\n      return () => {\n        if (\n          disableOutsidePointerEvents &&\n          context.layersWithOutsidePointerEventsDisabled.size === 1\n        ) {\n          ownerDocument.body.style.pointerEvents = originalBodyPointerEvents;\n        }\n      };\n    }, [node, ownerDocument, disableOutsidePointerEvents, context]);\n\n    /**\n     * We purposefully prevent combining this effect with the `disableOutsidePointerEvents` effect\n     * because a change to `disableOutsidePointerEvents` would remove this layer from the stack\n     * and add it to the end again so the layering order wouldn't be _creation order_.\n     * We only want them to be removed from context stacks when unmounted.\n     */\n    React.useEffect(() => {\n      return () => {\n        if (!node) return;\n        context.layers.delete(node);\n        context.layersWithOutsidePointerEventsDisabled.delete(node);\n        dispatchUpdate();\n      };\n    }, [node, context]);\n\n    React.useEffect(() => {\n      const handleUpdate = () => force({});\n      document.addEventListener(CONTEXT_UPDATE, handleUpdate);\n      return () => document.removeEventListener(CONTEXT_UPDATE, handleUpdate);\n    }, []);\n\n    return (\n      <Primitive.div\n        {...layerProps}\n        ref={composedRefs}\n        style={{\n          pointerEvents: isBodyPointerEventsDisabled\n            ? isPointerEventsEnabled\n              ? 'auto'\n              : 'none'\n            : undefined,\n          ...props.style,\n        }}\n        onFocusCapture={composeEventHandlers(props.onFocusCapture, focusOutside.onFocusCapture)}\n        onBlurCapture={composeEventHandlers(props.onBlurCapture, focusOutside.onBlurCapture)}\n        onPointerDownCapture={composeEventHandlers(\n          props.onPointerDownCapture,\n          pointerDownOutside.onPointerDownCapture\n        )}\n      />\n    );\n  }\n);\n\nDismissableLayer.displayName = DISMISSABLE_LAYER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DismissableLayerBranch\n * -----------------------------------------------------------------------------------------------*/\n\nconst BRANCH_NAME = 'DismissableLayerBranch';\n\ntype DismissableLayerBranchElement = React.ElementRef<typeof Primitive.div>;\ninterface DismissableLayerBranchProps extends PrimitiveDivProps {}\n\nconst DismissableLayerBranch = React.forwardRef<\n  DismissableLayerBranchElement,\n  DismissableLayerBranchProps\n>((props, forwardedRef) => {\n  const context = React.useContext(DismissableLayerContext);\n  const ref = React.useRef<DismissableLayerBranchElement>(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n\n  React.useEffect(() => {\n    const node = ref.current;\n    if (node) {\n      context.branches.add(node);\n      return () => {\n        context.branches.delete(node);\n      };\n    }\n  }, [context.branches]);\n\n  return <Primitive.div {...props} ref={composedRefs} />;\n});\n\nDismissableLayerBranch.displayName = BRANCH_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype PointerDownOutsideEvent = CustomEvent<{ originalEvent: PointerEvent }>;\ntype FocusOutsideEvent = CustomEvent<{ originalEvent: FocusEvent }>;\n\n/**\n * Listens for `pointerdown` outside a react subtree. We use `pointerdown` rather than `pointerup`\n * to mimic layer dismissing behaviour present in OS.\n * Returns props to pass to the node we want to check for outside events.\n */\nfunction usePointerDownOutside(\n  onPointerDownOutside?: (event: PointerDownOutsideEvent) => void,\n  ownerDocument: Document = globalThis?.document\n) {\n  const handlePointerDownOutside = useCallbackRef(onPointerDownOutside) as EventListener;\n  const isPointerInsideReactTreeRef = React.useRef(false);\n  const handleClickRef = React.useRef(() => {});\n\n  React.useEffect(() => {\n    const handlePointerDown = (event: PointerEvent) => {\n      if (event.target && !isPointerInsideReactTreeRef.current) {\n        const eventDetail = { originalEvent: event };\n\n        function handleAndDispatchPointerDownOutsideEvent() {\n          handleAndDispatchCustomEvent(\n            POINTER_DOWN_OUTSIDE,\n            handlePointerDownOutside,\n            eventDetail,\n            { discrete: true }\n          );\n        }\n\n        /**\n         * On touch devices, we need to wait for a click event because browsers implement\n         * a ~350ms delay between the time the user stops touching the display and when the\n         * browser executres events. We need to ensure we don't reactivate pointer-events within\n         * this timeframe otherwise the browser may execute events that should have been prevented.\n         *\n         * Additionally, this also lets us deal automatically with cancellations when a click event\n         * isn't raised because the page was considered scrolled/drag-scrolled, long-pressed, etc.\n         *\n         * This is why we also continuously remove the previous listener, because we cannot be\n         * certain that it was raised, and therefore cleaned-up.\n         */\n        if (event.pointerType === 'touch') {\n          ownerDocument.removeEventListener('click', handleClickRef.current);\n          handleClickRef.current = handleAndDispatchPointerDownOutsideEvent;\n          ownerDocument.addEventListener('click', handleClickRef.current, { once: true });\n        } else {\n          handleAndDispatchPointerDownOutsideEvent();\n        }\n      }\n      isPointerInsideReactTreeRef.current = false;\n    };\n    /**\n     * if this hook executes in a component that mounts via a `pointerdown` event, the event\n     * would bubble up to the document and trigger a `pointerDownOutside` event. We avoid\n     * this by delaying the event listener registration on the document.\n     * This is not React specific, but rather how the DOM works, ie:\n     * ```\n     * button.addEventListener('pointerdown', () => {\n     *   console.log('I will log');\n     *   document.addEventListener('pointerdown', () => {\n     *     console.log('I will also log');\n     *   })\n     * });\n     */\n    const timerId = window.setTimeout(() => {\n      ownerDocument.addEventListener('pointerdown', handlePointerDown);\n    }, 0);\n    return () => {\n      window.clearTimeout(timerId);\n      ownerDocument.removeEventListener('pointerdown', handlePointerDown);\n      ownerDocument.removeEventListener('click', handleClickRef.current);\n    };\n  }, [ownerDocument, handlePointerDownOutside]);\n\n  return {\n    // ensures we check React component tree (not just DOM tree)\n    onPointerDownCapture: () => (isPointerInsideReactTreeRef.current = true),\n  };\n}\n\n/**\n * Listens for when focus happens outside a react subtree.\n * Returns props to pass to the root (node) of the subtree we want to check.\n */\nfunction useFocusOutside(\n  onFocusOutside?: (event: FocusOutsideEvent) => void,\n  ownerDocument: Document = globalThis?.document\n) {\n  const handleFocusOutside = useCallbackRef(onFocusOutside) as EventListener;\n  const isFocusInsideReactTreeRef = React.useRef(false);\n\n  React.useEffect(() => {\n    const handleFocus = (event: FocusEvent) => {\n      if (event.target && !isFocusInsideReactTreeRef.current) {\n        const eventDetail = { originalEvent: event };\n        handleAndDispatchCustomEvent(FOCUS_OUTSIDE, handleFocusOutside, eventDetail, {\n          discrete: false,\n        });\n      }\n    };\n    ownerDocument.addEventListener('focusin', handleFocus);\n    return () => ownerDocument.removeEventListener('focusin', handleFocus);\n  }, [ownerDocument, handleFocusOutside]);\n\n  return {\n    onFocusCapture: () => (isFocusInsideReactTreeRef.current = true),\n    onBlurCapture: () => (isFocusInsideReactTreeRef.current = false),\n  };\n}\n\nfunction dispatchUpdate() {\n  const event = new CustomEvent(CONTEXT_UPDATE);\n  document.dispatchEvent(event);\n}\n\nfunction handleAndDispatchCustomEvent<E extends CustomEvent, OriginalEvent extends Event>(\n  name: string,\n  handler: ((event: E) => void) | undefined,\n  detail: { originalEvent: OriginalEvent } & (E extends CustomEvent<infer D> ? D : never),\n  { discrete }: { discrete: boolean }\n) {\n  const target = detail.originalEvent.target;\n  const event = new CustomEvent(name, { bubbles: false, cancelable: true, detail });\n  if (handler) target.addEventListener(name, handler as EventListener, { once: true });\n\n  if (discrete) {\n    dispatchDiscreteCustomEvent(target, event);\n  } else {\n    target.dispatchEvent(event);\n  }\n}\n\nconst Root = DismissableLayer;\nconst Branch = DismissableLayerBranch;\n\nexport {\n  DismissableLayer,\n  DismissableLayerBranch,\n  //\n  Root,\n  Branch,\n};\nexport type { DismissableLayerProps };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACSA,IAAMA,6BAAO;AAMb,IAAMC,gDAAQC,aAAAA,YAA2C,CAACC,OAAOC,iBAAiB;AAChF,QAAM,EAAA,UAAA,QAAoB,IAApB,SAAiC,GAAG,GAAGC,WAAH,IAAkBF;AAC5D,aACE,aAAAG,eAAC,0CAAU,KAAX,SAAA,CAAA,GACMD,YAFR;IAGI,KAAKD;IACL;IACA;IACA,SAAQ;IACR,qBAAoB;GANtB,GASGD,MAAMI,UAAUC,eAAW,aAAAF,eAT9B,WAAA;IASuC,QAAO;GAAhB,CAT9B;CAHU;AAiBd,OAAA,OAAA,2CAAA;EAAA,aAAA;CAAA;AAIA,IAAMG,4CAAOR;;;AEDb,IAAMS,oCAAc;AAGpB,IAAM,CAACC,2CAAqBC,uCAAtB,IAA2CC,yCAAmBH,iCAAD;AAMnE,IAAM,CAACI,sCAAgBC,sCAAjB,IAAqCJ,0CAAwCD,iCAArB;AAK9D,IAAMM,4CAAiCC,CAAAA,UAAoC;AACzE,QAAM,EAAA,eAAA,SAAiBC,IAAaD;AACpC,QAAM,CAACE,QAAQC,SAAT,QAAsBC,cAAAA,UAAkC,IAAlC;AAC5B,aACE,cAAAC,eAAC,sCADH;IACkB,OAAOC;IAAe;IAAgB,gBAAgBH;KACnEF,QADH;;AAMJ,OAAA,OAAA,2CAAA;EAAA,aAAA;CAAA;AAMA,IAAMM,oCAAc;AAQpB,IAAMC,+CAAeJ,cAAAA,YACnB,CAACJ,OAAuCS,iBAAiB;AACvD,QAAM,EAAA,eAAA,YAA6B,GAAGC,YAAH,IAAmBV;AACtD,QAAMW,UAAUb,uCAAiBS,mCAAaD,aAAd;AAChC,QAAMM,UAAMR,cAAAA,QAAkC,IAAlC;AACZ,QAAMS,eAAeC,0CAAgBL,cAAcG,GAAf;AAEpCR,oBAAAA,WAAgB,MAAM;AAIpBO,YAAQI,gBAAeC,eAAU,QAAVA,eAAU,SAAV,SAAAA,WAAYC,YAAWL,IAAIK,OAAlD;GAJF;AAOA,SAAOD,aAAa,WAAO,cAAAX,eAAC,0CAAU,KAAX,SAAA,CAAA,GAAmBK,aAA9C;IAA2D,KAAKG;GAArC,CAAA;CAdV;AAkBrB,OAAA,OAAA,0CAAA;EAAA,aAAA;CAAA;AAMA,IAAMK,qCAAe;AAUrB,IAAM,CAACC,6CAAuBC,uCAAxB,IACJ1B,0CAA+CwB,kCAA5B;AAmBrB,IAAMG,+CAAgBjB,cAAAA,YACpB,CAACJ,OAAwCS,iBAAiB;AAAA,MAAA,kBAAA,mBAAA,uBAAA,wBAAA,wBAAA,uBAAA,wBAAA;AACxD,QAAM,EAAA,eAAA,OAEG,UAFH,aAGS,GAHT,QAII,UAJJ,cAKU,GALV,eAMW,GANX,oBAOgB,CAAA,GACpBa,kBAAkBC,uBAAuB,GARrC,SASK,WATL,mBAUe,OAVf,kBAWc,MAXd,UAaJ,GAAGC,aAAH,IACExB;AAEJ,QAAMW,UAAUb,uCAAiBoB,oCAAcZ,aAAf;AAEhC,QAAM,CAACmB,SAASC,UAAV,QAAwBtB,cAAAA,UAAsC,IAAtC;AAC9B,QAAMS,eAAeC;IAAgBL;IAAekB,CAAAA,SAASD,WAAWC,IAAD;EAAnC;AAEpC,QAAM,CAACC,QAAOC,QAAR,QAAoBzB,cAAAA,UAAuC,IAAvC;AAC1B,QAAM0B,YAAYC,0CAAQH,MAAD;AACzB,QAAMI,cAAU,mBAAGF,cAAH,QAAGA,cAAH,SAAA,SAAGA,UAAWG,WAAd,QAAA,qBAAA,SAAA,mBAAuB;AACvC,QAAMC,eAAW,oBAAGJ,cAAH,QAAGA,cAAH,SAAA,SAAGA,UAAWK,YAAd,QAAA,sBAAA,SAAA,oBAAwB;AAEzC,QAAMC,mBAAoBC,QAAQC,UAAU,WAAW,MAAMA,QAAQ;AAErE,QAAMhB,mBACJ,OAAOC,yBAAyB,WAC5BA,uBACA;IAAEgB,KAAK;IAAGC,OAAO;IAAGC,QAAQ;IAAGC,MAAM;IAAG,GAAGnB;;AAEjD,QAAMoB,WAAWC,MAAMC,QAAQC,iBAAd,IAAmCA,oBAAoB;IAACA;;AACzE,QAAMC,wBAAwBJ,SAASK,SAAS;AAEhD,QAAMC,wBAAwB;IAC5BC,SAAS5B;IACTqB,UAAUA,SAASQ,OAAOC,+BAAhB;;IAEVC,aAAaN;;AAGf,QAAM,EAAA,MAAA,gBAAA,WAAA,cAAA,eAAiDO,IAAmBC,YAAY;;IAEpFC,UAAU;IACVC,WAAWrB;IACXsB,sBAAsBC;IACtBC,UAAU;MACRC,WAAWlD,QAAQT;;IAErB4D,YAAY;MACVC,OAAO;QAAEC,UAAUC,aAAa/B;QAAagC,eAAeC;OAAtD;MACNC,mBACEC,MAAM;QACJL,UAAU;QACVM,WAAW;QACXC,SAASC,WAAW,YAAYC,WAAU,IAAKC;QAC/C,GAAGzB;OAJA;MAMPmB,mBAAmBO,KAAK;QAAE,GAAG1B;OAAN;MACvB2B,KAAK;QACH,GAAG3B;QACH4B,OAAO,CAAC,EAAA,UAAA,OAAA,gBAAA,gBAAmCC,MAAsB;AAC/D,gBAAM,EAAE7C,OAAO8C,aAAa5C,QAAQ6C,aAAR7C,IAAyB8C,MAAMpB;AAC3D,gBAAMqB,eAAetB,SAASuB,SAASC;AACvCF,uBAAaG,YAAY,kCAAmC,GAAEC,cAAe,IAA7E;AACAJ,uBAAaG,YAAY,mCAAoC,GAAEP,eAAgB,IAA/E;AACAI,uBAAaG,YAAY,+BAAgC,GAAEN,WAAY,IAAvE;AACAG,uBAAaG,YAAY,gCAAiC,GAAEL,YAAa,IAAzE;;OARA;MAWJpD,UAAS2D,MAAgB;QAAEC,SAAS5D;QAAOsB,SAASuC;OAA5B;MACxBC,sCAAgB;;;OAAD;MACfC,oBAAoBC,KAAK;QAAEpC,UAAU;OAAb;;GA/ByD;AAmCrF,QAAM,CAACqC,YAAYC,WAAb,IAA4BC,mDAA6BtC,SAAD;AAE9D,QAAMuC,eAAeC,0CAAeC,QAAD;AACnCC,4CAAgB,MAAM;AACpB,QAAIC;AACFJ,uBAAY,QAAZA,iBAAY,UAAZA,aAAY;KAEb;IAACI;IAAcJ;GAJH;AAMf,QAAMK,UAAM,wBAAG/C,eAAe1B,WAAlB,QAAA,0BAAA,SAAA,SAAG,sBAAsB0E;AACrC,QAAMC,UAAM,yBAAGjD,eAAe1B,WAAlB,QAAA,2BAAA,SAAA,SAAG,uBAAsB4E;AACrC,QAAMC,sBAAoB,yBAAAnD,eAAe1B,WAAf,QAAA,2BAAA,SAAA,SAAA,uBAAsB8E,kBAAiB;AAEjE,QAAM,CAACC,eAAeC,gBAAhB,QAAoCxG,cAAAA,UAAA;AAC1C+F,4CAAgB,MAAM;AACpB,QAAI1E;AAASmF,uBAAiBC,OAAOC,iBAAiBrF,OAAxB,EAAiCsF,MAAlC;KAC5B;IAACtF;GAFW;AAIf,aACE,cAAApB,eADF,OAAA;IAEI,KAAK2G,KAAKC;IACV,qCAAkC;IAClC,OAAO;MACL,GAAGC;MACHC,WAAWf,eAAec,eAAeC,YAAY;;MACrDC,UAAU;MACVL,QAAQJ;MACR,CAAC,iCAAD,GAA4C;SAAA,wBAC1CrD,eAAeoC,qBAD2B,QAAA,0BAAA,SAAA,SAC1C,sBAAgCY;SADU,yBAE1ChD,eAAeoC,qBAF2B,QAAA,2BAAA,SAAA,SAE1C,uBAAgCc;QAChCa,KAAK,GAHqC;;IAQ9C,KAAKrH,MAAMsH;SAEX,cAAAjH,eAAC,6CAlBH;IAmBI,OAAOC;IACP;IACA,eAAeuB;IACf;IACA;IACA,iBAAiB4E;SAEjB,cAAApG,eAAC,0CAAU,KARb,SAAA;IASI,aAAWwF;IACX,cAAYC;KACRtE,cAHN;IAIE,KAAKX;IACL,OAAO;MACL,GAAGW,aAAa4D;;;MAGhBmC,WAAW,CAACnB,eAAe,SAAS1B;;MAEpC8C,UAAS,uBAAAlE,eAAesC,UAAf,QAAA,yBAAA,UAAA,qBAAqB6B,kBAAkB,IAAI/C;;GAXxD,CAAA,CARF,CAlBF;CAnGgB;AAiJtB,OAAA,OAAA,0CAAA;EAAA,aAAA;CAAA;AAMA,IAAMgD,mCAAa;AAEnB,IAAMC,sCAAoC;EACxCpF,KAAK;EACLC,OAAO;EACPC,QAAQ;EACRC,MAAM;;AAOR,IAAMkF,gDAAcxH,cAAAA,YAAuD,SAASwH,2CAClF5H,OACAS,cACA;AACA,QAAM,EAAA,eAAiB,GAAGoH,WAAH,IAAkB7H;AACzC,QAAM8H,iBAAiB1G,wCAAkBsG,kCAAYpH,aAAb;AACxC,QAAMyH,WAAWJ,oCAAcG,eAAejC,UAAhB;AAE9B;;;;QAIE,cAAAxF,eAAA,QAAA;MACE,KAAKyH,eAAeE;MACpB,OAAO;QACLC,UAAU;QACVvF,MAAMoF,eAAezB;QACrB9D,KAAKuF,eAAevB;QACpB,CAACwB,QAAD,GAAY;QACZrC,iBAAiB;UACfnD,KAAK;UACLC,OAAO;UACPC,QAAQ;UACRC,MAAM;UACNoF,eAAejC,UALA;QAMjBsB,WAAW;UACT5E,KAAK;UACLC,OAAO;UACPC,QAAS;UACTC,MAAM;UACNoF,eAAejC,UALN;QAMXqC,YAAYJ,eAAeK,kBAAkB,WAAWzD;;WAG1D,cAAArE,eAAC,2CAAD,SAAA,CAAA,GACMwH,YAvBR;MAwBI,KAAKpH;MACL,OAAO;QACL,GAAGoH,WAAWzC;;QAEdgD,SAAS;;KANb,CAAA,CAtBF;;CAZgB;AA+CpB,OAAA,OAAA,2CAAA;EAAA,aAAA;CAAA;AAIA,SAAShF,gCAAaiF,OAA6B;AACjD,SAAOA,UAAU;;AAGnB,IAAM3C,wCAAmB4C,CAAAA,aAAsE;EAC7FC,MAAM;;EAENC,GAAGC,MAAM;AAAA,QAAA,wBAAA,wBAAA,wBAAA,wBAAA;AACP,UAAM,EAAA,WAAA,OAAA,eAAoBnF,IAAmBmF;AAE7C,UAAMhC,sBAAoB,yBAAAnD,eAAe1B,WAAf,QAAA,2BAAA,SAAA,SAAA,uBAAsB8E,kBAAiB;AACjE,UAAMgC,gBAAgBjC;AACtB,UAAMzE,aAAa0G,gBAAgB,IAAIJ,QAAQtG;AAC/C,UAAME,cAAcwG,gBAAgB,IAAIJ,QAAQpG;AAEhD,UAAM,CAAC2D,YAAYC,WAAb,IAA4BC,mDAA6BtC,SAAD;AAC9D,UAAMkF,eAAe;MAAEC,OAAO;MAAMC,QAAQ;MAAOC,KAAK;MAAShD,WAA5C;AAErB,UAAMiD,iBAAe,0BAAA,yBAACzF,eAAe1B,WAAhB,QAAA,2BAAA,SAAA,SAAC,uBAAsB0E,OAAvB,QAAA,2BAAA,SAAA,yBAA4B,KAAKtE,aAAa;AACnE,UAAMgH,iBAAe,0BAAA,yBAAC1F,eAAe1B,WAAhB,QAAA,2BAAA,SAAA,SAAC,uBAAsB4E,OAAvB,QAAA,2BAAA,SAAA,yBAA4B,KAAKtE,cAAc;AAEpE,QAAIoE,IAAI;AACR,QAAIE,IAAI;AAER,QAAIX,eAAe,UAAU;AAC3BS,UAAIoC,gBAAgBC,eAAgB,GAAEI,YAAa;AACnDvC,UAAK,GAAE,CAACtE,WAAY;eACX2D,eAAe,OAAO;AAC/BS,UAAIoC,gBAAgBC,eAAgB,GAAEI,YAAa;AACnDvC,UAAK,GAAEvB,MAAME,SAAShD,SAASD,WAAY;eAClC2D,eAAe,SAAS;AACjCS,UAAK,GAAE,CAACpE,WAAY;AACpBsE,UAAIkC,gBAAgBC,eAAgB,GAAEK,YAAa;eAC1CnD,eAAe,QAAQ;AAChCS,UAAK,GAAErB,MAAME,SAASlD,QAAQC,WAAY;AAC1CsE,UAAIkC,gBAAgBC,eAAgB,GAAEK,YAAa;;AAErD,WAAO;MAAEP,MAAM;;;;;;;AAInB,SAAS1C,mDAA6BtC,WAAsB;AAC1D,QAAM,CAACpB,MAAMC,QAAQ,QAAf,IAA2BmB,UAAUwF,MAAM,GAAhB;AACjC,SAAO;IAAC5G;IAAcC;;;AAGxB,IAAM4G,4CAAOnJ;AACb,IAAMoJ,4CAAS3I;AACf,IAAM4I,4CAAU/H;AAChB,IAAMgI,4CAAQzB;;;;;AE7Xd,IAAM0B,oCAAc;AAQpB,IAAMC,gDAASC,cAAAA,YAA6C,CAACC,OAAOC,iBAAiB;AAAA,MAAA;AACnF,QAAM,EAAA,YAAcC,eAAH,QAAGA,eAAH,SAAA,UAAA,uBAAGA,WAAYC,cAAf,QAAA,yBAAA,SAAA,SAAG,qBAAsBC,MAAM,GAAGC,YAAH,IAAmBL;AACnE,SAAOM,YACHC,kBAAAA,QAASC,iBAAa,cAAAC,eAAC,0CAAU,KAAX,SAAA,CAAA,GAAmBJ,aAD7C;IAC0D,KAAKJ;GAArC,CAAA,GAAuDK,SAA7E,IACA;CAJS;AAOf,OAAA,OAAA,2CAAA;EAAA,aAAA;CAAA;;;;;;;AEnBA,SAASI,0CACPC,qBACAC,gBAA0BC,eAAH,QAAGA,eAAH,SAAA,SAAGA,WAAYC,UACtC;AACA,QAAMC,kBAAkBC,0CAAeL,mBAAD;AAEtCM,oBAAAA,WAAgB,MAAM;AACpB,UAAMC,gBAAiBC,CAAAA,UAAyB;AAC9C,UAAIA,MAAMC,QAAQ;AAChBL,wBAAgBI,KAAD;;AAGnBP,kBAAcS,iBAAiB,WAAWH,aAA1C;AACA,WAAO,MAAMN,cAAcU,oBAAoB,WAAWJ,aAA7C;KACZ;IAACH;IAAiBH;GARrB;;;;AECF,IAAMW,+CAAyB;AAC/B,IAAMC,uCAAiB;AACvB,IAAMC,6CAAuB;AAC7B,IAAMC,sCAAgB;AAEtB,IAAIC;AAEJ,IAAMC,oDAA0BC,cAAAA,eAAoB;EAClDC,QAAQ,oBAAIC,IAAJ;EACRC,wCAAwC,oBAAID,IAAJ;EACxCE,UAAU,oBAAIF,IAAJ;CAHoB;AA0ChC,IAAMG,gDAAmBL,cAAAA,YACvB,CAACM,OAAOC,iBAAiB;AAAA,MAAA;AACvB,QAAM,EAAA,8BAC0B,OAD1B,iBAAA,sBAAA,gBAAA,mBAAA,WAOJ,GAAGC,WAAH,IACEF;AACJ,QAAMG,cAAUT,cAAAA,YAAiBD,6CAAjB;AAChB,QAAM,CAACW,OAAMC,OAAP,QAAkBX,cAAAA,UAA+C,IAA/C;AACxB,QAAMY,iBAAa,sBAAGF,UAAH,QAAGA,UAAH,SAAA,SAAGA,MAAME,mBAAT,QAAA,wBAAA,SAAA,sBAA0BC,eAA1B,QAA0BA,eAA1B,SAAA,SAA0BA,WAAYC;AACzD,QAAM,CAAA,EAAGC,KAAH,QAAYf,cAAAA,UAAe,CAAA,CAAf;AAClB,QAAMgB,eAAeC;IAAgBV;IAAeG,CAAAA,SAASC,QAAQD,IAAD;EAAhC;AACpC,QAAMT,SAASiB,MAAMC,KAAKV,QAAQR,MAAnB;AACf,QAAM,CAACmB,4CAAD,IAAiD;OAAIX,QAAQN;IAAwCkB,MAAM,EAA1D;AACvD,QAAMC,oDAAoDrB,OAAOsB,QAAQH,4CAAf;AAC1D,QAAMI,QAAQd,QAAOT,OAAOsB,QAAQb,KAAf,IAAuB;AAC5C,QAAMe,8BAA8BhB,QAAQN,uCAAuCuB,OAAO;AAC1F,QAAMC,yBAAyBH,SAASF;AAExC,QAAMM,qBAAqBC,4CAAuBC,CAAAA,UAAU;AAC1D,UAAMC,SAASD,MAAMC;AACrB,UAAMC,wBAAwB;SAAIvB,QAAQL;MAAU6B;MAAMC,CAAAA,WAAWA,OAAOC,SAASJ,MAAhB;IAAvC;AAC9B,QAAI,CAACJ,0BAA0BK;AAAuB;AACtDI,6BAAoB,QAApBA,yBAAoB,UAApBA,qBAAuBN,KAAH;AACpBO,0BAAiB,QAAjBA,sBAAiB,UAAjBA,kBAAoBP,KAAH;AACjB,QAAI,CAACA,MAAMQ;AAAkBC,oBAAS,QAATA,cAAS,UAATA,UAAS;KACrC3B,aAP6C;AAShD,QAAM4B,eAAeC,sCAAiBX,CAAAA,UAAU;AAC9C,UAAMC,SAASD,MAAMC;AACrB,UAAMW,kBAAkB;SAAIjC,QAAQL;MAAU6B;MAAMC,CAAAA,WAAWA,OAAOC,SAASJ,MAAhB;IAAvC;AACxB,QAAIW;AAAiB;AACrBC,uBAAc,QAAdA,mBAAc,UAAdA,eAAiBb,KAAH;AACdO,0BAAiB,QAAjBA,sBAAiB,UAAjBA,kBAAoBP,KAAH;AACjB,QAAI,CAACA,MAAMQ;AAAkBC,oBAAS,QAATA,cAAS,UAATA,UAAS;KACrC3B,aAPiC;AASpCgC,4CAAkBd,CAAAA,UAAU;AAC1B,UAAMe,iBAAiBrB,UAAUf,QAAQR,OAAOyB,OAAO;AACvD,QAAI,CAACmB;AAAgB;AACrBC,wBAAe,QAAfA,oBAAe,UAAfA,gBAAkBhB,KAAH;AACf,QAAI,CAACA,MAAMQ,oBAAoBC,WAAW;AACxCT,YAAMiB,eAAN;AACAR,gBAAS;;KAEV3B,aARa;AAUhBZ,oBAAAA,WAAgB,MAAM;AACpB,QAAI,CAACU;AAAM;AACX,QAAIsC,6BAA6B;AAC/B,UAAIvC,QAAQN,uCAAuCuB,SAAS,GAAG;AAC7D5B,0DAA4Bc,cAAcqC,KAAKC,MAAMC;AACrDvC,sBAAcqC,KAAKC,MAAMC,gBAAgB;;AAE3C1C,cAAQN,uCAAuCiD,IAAI1C,KAAnD;;AAEFD,YAAQR,OAAOmD,IAAI1C,KAAnB;AACA2C,yCAAc;AACd,WAAO,MAAM;AACX,UACEL,+BACAvC,QAAQN,uCAAuCuB,SAAS;AAExDd,sBAAcqC,KAAKC,MAAMC,gBAAgBrD;;KAG5C;IAACY;IAAME;IAAeoC;IAA6BvC;GAnBtD;AA2BAT,oBAAAA,WAAgB,MAAM;AACpB,WAAO,MAAM;AACX,UAAI,CAACU;AAAM;AACXD,cAAQR,OAAOqD,OAAO5C,KAAtB;AACAD,cAAQN,uCAAuCmD,OAAO5C,KAAtD;AACA2C,2CAAc;;KAEf;IAAC3C;IAAMD;GAPV;AASAT,oBAAAA,WAAgB,MAAM;AACpB,UAAMuD,eAAe,MAAMxC,MAAM,CAAA,CAAD;AAChCD,aAAS0C,iBAAiB7D,sCAAgB4D,YAA1C;AACA,WAAO,MAAMzC,SAAS2C,oBAAoB9D,sCAAgB4D,YAA7C;KACZ,CAAA,CAJH;AAMA,aACE,cAAAG,eAAC,0CAAU,KAAX,SAAA,CAAA,GACMlD,YAFR;IAGI,KAAKQ;IACL,OAAO;MACLmC,eAAe1B,8BACXE,yBACE,SACA,SACFgC;MACJ,GAAGrD,MAAM4C;;IAEX,gBAAgBU,0CAAqBtD,MAAMuD,gBAAgBrB,aAAaqB,cAApC;IACpC,eAAeD,0CAAqBtD,MAAMwD,eAAetB,aAAasB,aAAnC;IACnC,sBAAsBF,0CACpBtD,MAAMyD,sBACNnC,mBAAmBmC,oBAFqB;GAb5C,CAAA;CA9FmB;AAoHzB,OAAA,OAAA,2CAAA;EAAA,aAAA;CAAA;AAMA,IAAMC,oCAAc;AAKpB,IAAMC,gDAAyBjE,cAAAA,YAG7B,CAACM,OAAOC,iBAAiB;AACzB,QAAME,cAAUT,cAAAA,YAAiBD,6CAAjB;AAChB,QAAMmE,UAAMlE,cAAAA,QAA4C,IAA5C;AACZ,QAAMgB,eAAeC,0CAAgBV,cAAc2D,GAAf;AAEpClE,oBAAAA,WAAgB,MAAM;AACpB,UAAMU,OAAOwD,IAAIC;AACjB,QAAIzD,MAAM;AACRD,cAAQL,SAASgD,IAAI1C,IAArB;AACA,aAAO,MAAM;AACXD,gBAAQL,SAASkD,OAAO5C,IAAxB;;;KAGH;IAACD,QAAQL;GARZ;AAUA,aAAO,cAAAsD,eAAC,0CAAU,KAAX,SAAA,CAAA,GAAmBpD,OAA1B;IAAiC,KAAKU;GAA/B,CAAA;CAlBsB;AAqB/B,OAAA,OAAA,2CAAA;EAAA,aAAA;CAAA;AAYA,SAASa,4CACPO,sBACAxB,gBAA0BC,eAAH,QAAGA,eAAH,SAAA,SAAGA,WAAYC,UACtC;AACA,QAAMsD,2BAA2BC,0CAAejC,oBAAD;AAC/C,QAAMkC,kCAA8BtE,cAAAA,QAAa,KAAb;AACpC,QAAMuE,qBAAiBvE,cAAAA,QAAa,MAAM;EAAA,CAAnB;AAEvBA,oBAAAA,WAAgB,MAAM;AACpB,UAAMwE,oBAAqB1C,CAAAA,UAAwB;AACjD,UAAIA,MAAMC,UAAU,CAACuC,4BAA4BH,SAAS;AAGxD,YAASM,2CAAT,WAAoD;AAClDC,6DACE9E,4CACAwE,0BACAO,aACA;YAAEC,UAAU;WAJc;;AAH9B,cAAMD,cAAc;UAAEE,eAAe/C;;AAuBrC,YAAIA,MAAMgD,gBAAgB,SAAS;AACjClE,wBAAc6C,oBAAoB,SAASc,eAAeJ,OAA1D;AACAI,yBAAeJ,UAAUM;AACzB7D,wBAAc4C,iBAAiB,SAASe,eAAeJ,SAAS;YAAEY,MAAM;WAAxE;;AAEAN,mDAAwC;;AAG5CH,kCAA4BH,UAAU;;AAexC,UAAMa,UAAUC,OAAOC,WAAW,MAAM;AACtCtE,oBAAc4C,iBAAiB,eAAegB,iBAA9C;OACC,CAFa;AAGhB,WAAO,MAAM;AACXS,aAAOE,aAAaH,OAApB;AACApE,oBAAc6C,oBAAoB,eAAee,iBAAjD;AACA5D,oBAAc6C,oBAAoB,SAASc,eAAeJ,OAA1D;;KAED;IAACvD;IAAewD;GAzDnB;AA2DA,SAAO;;IAELL,sBAAsB,MAAOO,4BAA4BH,UAAU;;;AAQvE,SAAS1B,sCACPE,gBACA/B,gBAA0BC,eAAH,QAAGA,eAAH,SAAA,SAAGA,WAAYC,UACtC;AACA,QAAMsE,qBAAqBf,0CAAe1B,cAAD;AACzC,QAAM0C,gCAA4BrF,cAAAA,QAAa,KAAb;AAElCA,oBAAAA,WAAgB,MAAM;AACpB,UAAMsF,cAAexD,CAAAA,UAAsB;AACzC,UAAIA,MAAMC,UAAU,CAACsD,0BAA0BlB,SAAS;AACtD,cAAMQ,cAAc;UAAEE,eAAe/C;;AACrC4C,2DAA6B7E,qCAAeuF,oBAAoBT,aAAa;UAC3EC,UAAU;SADgB;;;AAKhChE,kBAAc4C,iBAAiB,WAAW8B,WAA1C;AACA,WAAO,MAAM1E,cAAc6C,oBAAoB,WAAW6B,WAA7C;KACZ;IAAC1E;IAAewE;GAXnB;AAaA,SAAO;IACLvB,gBAAgB,MAAOwB,0BAA0BlB,UAAU;IAC3DL,eAAe,MAAOuB,0BAA0BlB,UAAU;;;AAI9D,SAASd,uCAAiB;AACxB,QAAMvB,QAAQ,IAAIyD,YAAY5F,oCAAhB;AACdmB,WAAS0E,cAAc1D,KAAvB;;AAGF,SAAS4C,mDACPe,MACAC,SACAC,QACA,EAAA,SAAEf,GACF;AACA,QAAM7C,SAAS4D,OAAOd,cAAc9C;AACpC,QAAMD,QAAQ,IAAIyD,YAAYE,MAAM;IAAEG,SAAS;IAAOC,YAAY;;GAApD;AACd,MAAIH;AAAS3D,WAAOyB,iBAAiBiC,MAAMC,SAA0B;MAAEX,MAAM;KAAhE;AAEb,MAAIH;AACFkB,8CAA4B/D,QAAQD,KAAT;;AAE3BC,WAAOyD,cAAc1D,KAArB;;",
  "names": ["NAME", "Arrow", "React", "props", "forwardedRef", "arrowProps", "$jbnEx$createElement", "asChild", "children", "Root", "POPPER_NAME", "createPopperContext", "createPopperScope", "createContextScope", "PopperProvider", "usePopperContext", "Popper", "props", "children", "anchor", "setAnchor", "React", "$kY93V$createElement", "__scopePopper", "ANCHOR_NAME", "PopperAnchor", "forwardedRef", "anchorProps", "context", "ref", "composedRefs", "useComposedRefs", "onAnchorChange", "virtualRef", "current", "CONTENT_NAME", "PopperContentProvider", "useContentContext", "PopperContent", "collisionPadding", "collisionPaddingProp", "contentProps", "content", "setContent", "node", "arrow", "setArrow", "arrowSize", "useSize", "arrowWidth", "width", "arrowHeight", "height", "desiredPlacement", "side", "align", "top", "right", "bottom", "left", "boundary", "Array", "isArray", "collisionBoundary", "hasExplicitBoundaries", "length", "detectOverflowOptions", "padding", "filter", "isNotNull", "altBoundary", "middlewareData", "useFloating", "strategy", "placement", "whileElementsMounted", "autoUpdate", "elements", "reference", "middleware", "offset", "mainAxis", "sideOffset", "alignmentAxis", "alignOffset", "avoidCollisions", "shift", "crossAxis", "limiter", "sticky", "limitShift", "undefined", "flip", "size", "apply", "availableHeight", "anchorWidth", "anchorHeight", "rects", "contentStyle", "floating", "style", "setProperty", "availableWidth", "floatingUIarrow", "element", "arrowPadding", "transformOrigin", "hideWhenDetached", "hide", "placedSide", "placedAlign", "getSideAndAlignFromPlacement", "handlePlaced", "useCallbackRef", "onPlaced", "useLayoutEffect", "isPositioned", "arrowX", "x", "arrowY", "y", "cannotCenterArrow", "centerOffset", "contentZIndex", "setContentZIndex", "window", "getComputedStyle", "zIndex", "refs", "setFloating", "floatingStyles", "transform", "minWidth", "join", "dir", "animation", "opacity", "referenceHidden", "ARROW_NAME", "OPPOSITE_SIDE", "PopperArrow", "arrowProps", "contentContext", "baseSide", "onArrowChange", "position", "visibility", "shouldHideArrow", "display", "value", "options", "name", "fn", "data", "isArrowHidden", "noArrowAlign", "start", "center", "end", "arrowXCenter", "arrowYCenter", "split", "Root", "Anchor", "Content", "Arrow", "PORTAL_NAME", "Portal", "React", "props", "forwardedRef", "globalThis", "document", "body", "portalProps", "container", "ReactDOM", "createPortal", "$7SXl2$createElement", "useEscapeKeydown", "onEscapeKeyDownProp", "ownerDocument", "globalThis", "document", "onEscapeKeyDown", "useCallbackRef", "React", "handleKeyDown", "event", "key", "addEventListener", "removeEventListener", "DISMISSABLE_LAYER_NAME", "CONTEXT_UPDATE", "POINTER_DOWN_OUTSIDE", "FOCUS_OUTSIDE", "originalBodyPointerEvents", "DismissableLayerContext", "React", "layers", "Set", "layersWithOutsidePointerEventsDisabled", "branches", "DismissableLayer", "props", "forwardedRef", "layerProps", "context", "node", "setNode", "ownerDocument", "globalThis", "document", "force", "composedRefs", "useComposedRefs", "Array", "from", "highestLayerWithOutsidePointerEventsDisabled", "slice", "highestLayerWithOutsidePointerEventsDisabledIndex", "indexOf", "index", "isBodyPointerEventsDisabled", "size", "isPointerEventsEnabled", "pointerDownOutside", "usePointerDownOutside", "event", "target", "isPointerDownOnBranch", "some", "branch", "contains", "onPointerDownOutside", "onInteractOutside", "defaultPrevented", "onDismiss", "focusOutside", "useFocusOutside", "isFocusInBranch", "onFocusOutside", "useEscapeKeydown", "isHighestLayer", "onEscapeKeyDown", "preventDefault", "disableOutsidePointerEvents", "body", "style", "pointerEvents", "add", "dispatchUpdate", "delete", "handleUpdate", "addEventListener", "removeEventListener", "$kqwpH$createElement", "undefined", "composeEventHandlers", "onFocusCapture", "onBlurCapture", "onPointerDownCapture", "BRANCH_NAME", "DismissableLayerBranch", "ref", "current", "handlePointerDownOutside", "useCallbackRef", "isPointerInsideReactTreeRef", "handleClickRef", "handlePointerDown", "handleAndDispatchPointerDownOutsideEvent", "handleAndDispatchCustomEvent", "eventDetail", "discrete", "originalEvent", "pointerType", "once", "timerId", "window", "setTimeout", "clearTimeout", "handleFocusOutside", "isFocusInsideReactTreeRef", "handleFocus", "CustomEvent", "dispatchEvent", "name", "handler", "detail", "bubbles", "cancelable", "dispatchDiscreteCustomEvent"]
}
