import {
  pickAttrs
} from "./chunk-YN6J3FLV.js";
import {
  _assertThisInitialized,
  _classCallCheck,
  _createClass,
  _createSuper,
  _inherits,
  require_classnames
} from "./chunk-OG5KCCLP.js";
import {
  _objectSpread2
} from "./chunk-7MXPLNUX.js";
import {
  _defineProperty
} from "./chunk-TXF2VG4Y.js";
import {
  _extends
} from "./chunk-VCGGRANA.js";
import {
  require_react
} from "./chunk-WWXSLZJU.js";
import {
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/rc-pagination/es/Pagination.js
var import_classnames2 = __toESM(require_classnames());
var import_react3 = __toESM(require_react());

// node_modules/rc-pagination/es/KeyCode.js
var KeyCode = {
  ZERO: 48,
  NINE: 57,
  NUMPAD_ZERO: 96,
  NUMPAD_NINE: 105,
  BACKSPACE: 8,
  DELETE: 46,
  ENTER: 13,
  ARROW_UP: 38,
  ARROW_DOWN: 40
};
var KeyCode_default = KeyCode;

// node_modules/rc-pagination/es/locale/zh_CN.js
var zh_CN_default = {
  // Options.jsx
  items_per_page: "条/页",
  jump_to: "跳至",
  jump_to_confirm: "确定",
  page: "页",
  // Pagination.jsx
  prev_page: "上一页",
  next_page: "下一页",
  prev_5: "向前 5 页",
  next_5: "向后 5 页",
  prev_3: "向前 3 页",
  next_3: "向后 3 页",
  page_size: "页码"
};

// node_modules/rc-pagination/es/Options.js
var import_react = __toESM(require_react());
var Options = function(_React$Component) {
  _inherits(Options2, _React$Component);
  var _super = _createSuper(Options2);
  function Options2() {
    var _this;
    _classCallCheck(this, Options2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "state", {
      goInputText: ""
    });
    _defineProperty(_assertThisInitialized(_this), "getValidValue", function() {
      var goInputText = _this.state.goInputText;
      return !goInputText || Number.isNaN(goInputText) ? void 0 : Number(goInputText);
    });
    _defineProperty(_assertThisInitialized(_this), "buildOptionText", function(value) {
      return "".concat(value, " ").concat(_this.props.locale.items_per_page);
    });
    _defineProperty(_assertThisInitialized(_this), "changeSize", function(value) {
      _this.props.changeSize(Number(value));
    });
    _defineProperty(_assertThisInitialized(_this), "handleChange", function(e) {
      _this.setState({
        goInputText: e.target.value
      });
    });
    _defineProperty(_assertThisInitialized(_this), "handleBlur", function(e) {
      var _this$props = _this.props, goButton = _this$props.goButton, quickGo = _this$props.quickGo, rootPrefixCls = _this$props.rootPrefixCls;
      var goInputText = _this.state.goInputText;
      if (goButton || goInputText === "") {
        return;
      }
      _this.setState({
        goInputText: ""
      });
      if (e.relatedTarget && (e.relatedTarget.className.indexOf("".concat(rootPrefixCls, "-item-link")) >= 0 || e.relatedTarget.className.indexOf("".concat(rootPrefixCls, "-item")) >= 0)) {
        return;
      }
      quickGo(_this.getValidValue());
    });
    _defineProperty(_assertThisInitialized(_this), "go", function(e) {
      var goInputText = _this.state.goInputText;
      if (goInputText === "") {
        return;
      }
      if (e.keyCode === KeyCode_default.ENTER || e.type === "click") {
        _this.setState({
          goInputText: ""
        });
        _this.props.quickGo(_this.getValidValue());
      }
    });
    return _this;
  }
  _createClass(Options2, [{
    key: "getPageSizeOptions",
    value: function getPageSizeOptions() {
      var _this$props2 = this.props, pageSize = _this$props2.pageSize, pageSizeOptions = _this$props2.pageSizeOptions;
      if (pageSizeOptions.some(function(option) {
        return option.toString() === pageSize.toString();
      })) {
        return pageSizeOptions;
      }
      return pageSizeOptions.concat([pageSize.toString()]).sort(function(a, b) {
        var numberA = Number.isNaN(Number(a)) ? 0 : Number(a);
        var numberB = Number.isNaN(Number(b)) ? 0 : Number(b);
        return numberA - numberB;
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props3 = this.props, pageSize = _this$props3.pageSize, locale = _this$props3.locale, rootPrefixCls = _this$props3.rootPrefixCls, changeSize = _this$props3.changeSize, quickGo = _this$props3.quickGo, goButton = _this$props3.goButton, selectComponentClass = _this$props3.selectComponentClass, buildOptionText = _this$props3.buildOptionText, selectPrefixCls = _this$props3.selectPrefixCls, disabled = _this$props3.disabled;
      var goInputText = this.state.goInputText;
      var prefixCls = "".concat(rootPrefixCls, "-options");
      var Select = selectComponentClass;
      var changeSelect = null;
      var goInput = null;
      var gotoButton = null;
      if (!changeSize && !quickGo) {
        return null;
      }
      var pageSizeOptions = this.getPageSizeOptions();
      if (changeSize && Select) {
        var options = pageSizeOptions.map(function(opt, i) {
          return import_react.default.createElement(Select.Option, {
            key: i,
            value: opt.toString()
          }, (buildOptionText || _this2.buildOptionText)(opt));
        });
        changeSelect = import_react.default.createElement(Select, {
          disabled,
          prefixCls: selectPrefixCls,
          showSearch: false,
          className: "".concat(prefixCls, "-size-changer"),
          optionLabelProp: "children",
          popupMatchSelectWidth: false,
          value: (pageSize || pageSizeOptions[0]).toString(),
          onChange: this.changeSize,
          getPopupContainer: function getPopupContainer(triggerNode) {
            return triggerNode.parentNode;
          },
          "aria-label": locale.page_size,
          defaultOpen: false
        }, options);
      }
      if (quickGo) {
        if (goButton) {
          gotoButton = typeof goButton === "boolean" ? import_react.default.createElement("button", {
            type: "button",
            onClick: this.go,
            onKeyUp: this.go,
            disabled,
            className: "".concat(prefixCls, "-quick-jumper-button")
          }, locale.jump_to_confirm) : import_react.default.createElement("span", {
            onClick: this.go,
            onKeyUp: this.go
          }, goButton);
        }
        goInput = import_react.default.createElement("div", {
          className: "".concat(prefixCls, "-quick-jumper")
        }, locale.jump_to, import_react.default.createElement("input", {
          disabled,
          type: "text",
          value: goInputText,
          onChange: this.handleChange,
          onKeyUp: this.go,
          onBlur: this.handleBlur,
          "aria-label": locale.page
        }), locale.page, gotoButton);
      }
      return import_react.default.createElement("li", {
        className: "".concat(prefixCls)
      }, changeSelect, goInput);
    }
  }]);
  return Options2;
}(import_react.default.Component);
_defineProperty(Options, "defaultProps", {
  pageSizeOptions: ["10", "20", "50", "100"]
});
var Options_default = Options;

// node_modules/rc-pagination/es/Pager.js
var import_classnames = __toESM(require_classnames());
var import_react2 = __toESM(require_react());
var Pager = function Pager2(props) {
  var _classNames;
  var rootPrefixCls = props.rootPrefixCls, page = props.page, active = props.active, className = props.className, showTitle = props.showTitle, onClick = props.onClick, onKeyPress = props.onKeyPress, itemRender = props.itemRender;
  var prefixCls = "".concat(rootPrefixCls, "-item");
  var cls = (0, import_classnames.default)(prefixCls, "".concat(prefixCls, "-").concat(page), (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-active"), active), _defineProperty(_classNames, "".concat(prefixCls, "-disabled"), !page), _defineProperty(_classNames, props.className, className), _classNames));
  var handleClick = function handleClick2() {
    onClick(page);
  };
  var handleKeyPress = function handleKeyPress2(e) {
    onKeyPress(e, onClick, page);
  };
  var pager = itemRender(page, "page", import_react2.default.createElement("a", {
    rel: "nofollow"
  }, page));
  if (!pager)
    return null;
  return import_react2.default.createElement("li", {
    title: showTitle ? page.toString() : null,
    className: cls,
    onClick: handleClick,
    onKeyPress: handleKeyPress,
    tabIndex: 0
  }, pager);
};
var Pager_default = Pager;

// node_modules/rc-pagination/es/Pagination.js
function noop() {
}
function isInteger(v) {
  var value = Number(v);
  return (
    // eslint-disable-next-line no-restricted-globals
    typeof value === "number" && !Number.isNaN(value) && isFinite(value) && Math.floor(value) === value
  );
}
var defaultItemRender = function defaultItemRender2(page, type, element) {
  return element;
};
function calculatePage(p, state, props) {
  var pageSize = typeof p === "undefined" ? state.pageSize : p;
  return Math.floor((props.total - 1) / pageSize) + 1;
}
var Pagination = function(_React$Component) {
  _inherits(Pagination2, _React$Component);
  var _super = _createSuper(Pagination2);
  function Pagination2(props) {
    var _this;
    _classCallCheck(this, Pagination2);
    _this = _super.call(this, props);
    _defineProperty(_assertThisInitialized(_this), "paginationNode", import_react3.default.createRef());
    _defineProperty(_assertThisInitialized(_this), "getJumpPrevPage", function() {
      return Math.max(1, _this.state.current - (_this.props.showLessItems ? 3 : 5));
    });
    _defineProperty(_assertThisInitialized(_this), "getJumpNextPage", function() {
      return Math.min(calculatePage(void 0, _this.state, _this.props), _this.state.current + (_this.props.showLessItems ? 3 : 5));
    });
    _defineProperty(_assertThisInitialized(_this), "getItemIcon", function(icon, label) {
      var prefixCls = _this.props.prefixCls;
      var iconNode = icon || import_react3.default.createElement("button", {
        type: "button",
        "aria-label": label,
        className: "".concat(prefixCls, "-item-link")
      });
      if (typeof icon === "function") {
        iconNode = import_react3.default.createElement(icon, _objectSpread2({}, _this.props));
      }
      return iconNode;
    });
    _defineProperty(_assertThisInitialized(_this), "isValid", function(page) {
      var total = _this.props.total;
      return isInteger(page) && page !== _this.state.current && isInteger(total) && total > 0;
    });
    _defineProperty(_assertThisInitialized(_this), "shouldDisplayQuickJumper", function() {
      var _this$props = _this.props, showQuickJumper = _this$props.showQuickJumper, total = _this$props.total;
      var pageSize = _this.state.pageSize;
      if (total <= pageSize) {
        return false;
      }
      return showQuickJumper;
    });
    _defineProperty(_assertThisInitialized(_this), "handleKeyDown", function(e) {
      if (e.keyCode === KeyCode_default.ARROW_UP || e.keyCode === KeyCode_default.ARROW_DOWN) {
        e.preventDefault();
      }
    });
    _defineProperty(_assertThisInitialized(_this), "handleKeyUp", function(e) {
      var value = _this.getValidValue(e);
      var currentInputValue = _this.state.currentInputValue;
      if (value !== currentInputValue) {
        _this.setState({
          currentInputValue: value
        });
      }
      if (e.keyCode === KeyCode_default.ENTER) {
        _this.handleChange(value);
      } else if (e.keyCode === KeyCode_default.ARROW_UP) {
        _this.handleChange(value - 1);
      } else if (e.keyCode === KeyCode_default.ARROW_DOWN) {
        _this.handleChange(value + 1);
      }
    });
    _defineProperty(_assertThisInitialized(_this), "handleBlur", function(e) {
      var value = _this.getValidValue(e);
      _this.handleChange(value);
    });
    _defineProperty(_assertThisInitialized(_this), "changePageSize", function(size) {
      var current = _this.state.current;
      var newCurrent = calculatePage(size, _this.state, _this.props);
      current = current > newCurrent ? newCurrent : current;
      if (newCurrent === 0) {
        current = _this.state.current;
      }
      if (typeof size === "number") {
        if (!("pageSize" in _this.props)) {
          _this.setState({
            pageSize: size
          });
        }
        if (!("current" in _this.props)) {
          _this.setState({
            current,
            currentInputValue: current
          });
        }
      }
      _this.props.onShowSizeChange(current, size);
      if ("onChange" in _this.props && _this.props.onChange) {
        _this.props.onChange(current, size);
      }
    });
    _defineProperty(_assertThisInitialized(_this), "handleChange", function(page) {
      var _this$props2 = _this.props, disabled = _this$props2.disabled, onChange = _this$props2.onChange;
      var _this$state = _this.state, pageSize = _this$state.pageSize, current = _this$state.current, currentInputValue = _this$state.currentInputValue;
      if (_this.isValid(page) && !disabled) {
        var currentPage = calculatePage(void 0, _this.state, _this.props);
        var newPage = page;
        if (page > currentPage) {
          newPage = currentPage;
        } else if (page < 1) {
          newPage = 1;
        }
        if (!("current" in _this.props)) {
          _this.setState({
            current: newPage
          });
        }
        if (newPage !== currentInputValue) {
          _this.setState({
            currentInputValue: newPage
          });
        }
        onChange(newPage, pageSize);
        return newPage;
      }
      return current;
    });
    _defineProperty(_assertThisInitialized(_this), "prev", function() {
      if (_this.hasPrev()) {
        _this.handleChange(_this.state.current - 1);
      }
    });
    _defineProperty(_assertThisInitialized(_this), "next", function() {
      if (_this.hasNext()) {
        _this.handleChange(_this.state.current + 1);
      }
    });
    _defineProperty(_assertThisInitialized(_this), "jumpPrev", function() {
      _this.handleChange(_this.getJumpPrevPage());
    });
    _defineProperty(_assertThisInitialized(_this), "jumpNext", function() {
      _this.handleChange(_this.getJumpNextPage());
    });
    _defineProperty(_assertThisInitialized(_this), "hasPrev", function() {
      return _this.state.current > 1;
    });
    _defineProperty(_assertThisInitialized(_this), "hasNext", function() {
      return _this.state.current < calculatePage(void 0, _this.state, _this.props);
    });
    _defineProperty(_assertThisInitialized(_this), "runIfEnter", function(event, callback) {
      if (event.key === "Enter" || event.charCode === 13) {
        for (var _len = arguments.length, restParams = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          restParams[_key - 2] = arguments[_key];
        }
        callback.apply(void 0, restParams);
      }
    });
    _defineProperty(_assertThisInitialized(_this), "runIfEnterPrev", function(e) {
      _this.runIfEnter(e, _this.prev);
    });
    _defineProperty(_assertThisInitialized(_this), "runIfEnterNext", function(e) {
      _this.runIfEnter(e, _this.next);
    });
    _defineProperty(_assertThisInitialized(_this), "runIfEnterJumpPrev", function(e) {
      _this.runIfEnter(e, _this.jumpPrev);
    });
    _defineProperty(_assertThisInitialized(_this), "runIfEnterJumpNext", function(e) {
      _this.runIfEnter(e, _this.jumpNext);
    });
    _defineProperty(_assertThisInitialized(_this), "handleGoTO", function(e) {
      if (e.keyCode === KeyCode_default.ENTER || e.type === "click") {
        _this.handleChange(_this.state.currentInputValue);
      }
    });
    _defineProperty(_assertThisInitialized(_this), "renderPrev", function(prevPage) {
      var _this$props3 = _this.props, prevIcon = _this$props3.prevIcon, itemRender = _this$props3.itemRender;
      var prevButton = itemRender(prevPage, "prev", _this.getItemIcon(prevIcon, "prev page"));
      var disabled = !_this.hasPrev();
      return (0, import_react3.isValidElement)(prevButton) ? (0, import_react3.cloneElement)(prevButton, {
        disabled
      }) : prevButton;
    });
    _defineProperty(_assertThisInitialized(_this), "renderNext", function(nextPage) {
      var _this$props4 = _this.props, nextIcon = _this$props4.nextIcon, itemRender = _this$props4.itemRender;
      var nextButton = itemRender(nextPage, "next", _this.getItemIcon(nextIcon, "next page"));
      var disabled = !_this.hasNext();
      return (0, import_react3.isValidElement)(nextButton) ? (0, import_react3.cloneElement)(nextButton, {
        disabled
      }) : nextButton;
    });
    var hasOnChange = props.onChange !== noop;
    var hasCurrent = "current" in props;
    if (hasCurrent && !hasOnChange) {
      console.warn("Warning: You provided a `current` prop to a Pagination component without an `onChange` handler. This will render a read-only component.");
    }
    var _current = props.defaultCurrent;
    if ("current" in props) {
      _current = props.current;
    }
    var _pageSize = props.defaultPageSize;
    if ("pageSize" in props) {
      _pageSize = props.pageSize;
    }
    _current = Math.min(_current, calculatePage(_pageSize, void 0, props));
    _this.state = {
      current: _current,
      currentInputValue: _current,
      pageSize: _pageSize
    };
    return _this;
  }
  _createClass(Pagination2, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(_, prevState) {
      var prefixCls = this.props.prefixCls;
      if (prevState.current !== this.state.current && this.paginationNode.current) {
        var lastCurrentNode = this.paginationNode.current.querySelector(".".concat(prefixCls, "-item-").concat(prevState.current));
        if (lastCurrentNode && document.activeElement === lastCurrentNode) {
          var _lastCurrentNode$blur;
          lastCurrentNode === null || lastCurrentNode === void 0 || (_lastCurrentNode$blur = lastCurrentNode.blur) === null || _lastCurrentNode$blur === void 0 || _lastCurrentNode$blur.call(lastCurrentNode);
        }
      }
    }
  }, {
    key: "getValidValue",
    value: function getValidValue(e) {
      var inputValue = e.target.value;
      var allPages = calculatePage(void 0, this.state, this.props);
      var currentInputValue = this.state.currentInputValue;
      var value;
      if (inputValue === "") {
        value = inputValue;
      } else if (Number.isNaN(Number(inputValue))) {
        value = currentInputValue;
      } else if (inputValue >= allPages) {
        value = allPages;
      } else {
        value = Number(inputValue);
      }
      return value;
    }
  }, {
    key: "getShowSizeChanger",
    value: function getShowSizeChanger() {
      var _this$props5 = this.props, showSizeChanger = _this$props5.showSizeChanger, total = _this$props5.total, totalBoundaryShowSizeChanger = _this$props5.totalBoundaryShowSizeChanger;
      if (typeof showSizeChanger !== "undefined") {
        return showSizeChanger;
      }
      return total > totalBoundaryShowSizeChanger;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props6 = this.props, prefixCls = _this$props6.prefixCls, className = _this$props6.className, style = _this$props6.style, disabled = _this$props6.disabled, hideOnSinglePage = _this$props6.hideOnSinglePage, total = _this$props6.total, locale = _this$props6.locale, showQuickJumper = _this$props6.showQuickJumper, showLessItems = _this$props6.showLessItems, showTitle = _this$props6.showTitle, showTotal = _this$props6.showTotal, simple = _this$props6.simple, itemRender = _this$props6.itemRender, showPrevNextJumpers = _this$props6.showPrevNextJumpers, jumpPrevIcon = _this$props6.jumpPrevIcon, jumpNextIcon = _this$props6.jumpNextIcon, selectComponentClass = _this$props6.selectComponentClass, selectPrefixCls = _this$props6.selectPrefixCls, pageSizeOptions = _this$props6.pageSizeOptions;
      var _this$state2 = this.state, current = _this$state2.current, pageSize = _this$state2.pageSize, currentInputValue = _this$state2.currentInputValue;
      if (hideOnSinglePage === true && total <= pageSize) {
        return null;
      }
      var allPages = calculatePage(void 0, this.state, this.props);
      var pagerList = [];
      var jumpPrev = null;
      var jumpNext = null;
      var firstPager = null;
      var lastPager = null;
      var gotoButton = null;
      var goButton = showQuickJumper && showQuickJumper.goButton;
      var pageBufferSize = showLessItems ? 1 : 2;
      var prevPage = current - 1 > 0 ? current - 1 : 0;
      var nextPage = current + 1 < allPages ? current + 1 : allPages;
      var dataOrAriaAttributeProps = pickAttrs(this.props, {
        aria: true,
        data: true
      });
      var totalText = showTotal && import_react3.default.createElement("li", {
        className: "".concat(prefixCls, "-total-text")
      }, showTotal(total, [total === 0 ? 0 : (current - 1) * pageSize + 1, current * pageSize > total ? total : current * pageSize]));
      if (simple) {
        if (goButton) {
          if (typeof goButton === "boolean") {
            gotoButton = import_react3.default.createElement("button", {
              type: "button",
              onClick: this.handleGoTO,
              onKeyUp: this.handleGoTO
            }, locale.jump_to_confirm);
          } else {
            gotoButton = import_react3.default.createElement("span", {
              onClick: this.handleGoTO,
              onKeyUp: this.handleGoTO
            }, goButton);
          }
          gotoButton = import_react3.default.createElement("li", {
            title: showTitle ? "".concat(locale.jump_to).concat(current, "/").concat(allPages) : null,
            className: "".concat(prefixCls, "-simple-pager")
          }, gotoButton);
        }
        var _prev = this.renderPrev(prevPage);
        return import_react3.default.createElement("ul", _extends({
          className: (0, import_classnames2.default)(prefixCls, "".concat(prefixCls, "-simple"), _defineProperty({}, "".concat(prefixCls, "-disabled"), disabled), className),
          style,
          ref: this.paginationNode
        }, dataOrAriaAttributeProps), totalText, _prev ? import_react3.default.createElement("li", {
          title: showTitle ? locale.prev_page : null,
          onClick: this.prev,
          tabIndex: this.hasPrev() ? 0 : null,
          onKeyPress: this.runIfEnterPrev,
          className: (0, import_classnames2.default)("".concat(prefixCls, "-prev"), _defineProperty({}, "".concat(prefixCls, "-disabled"), !this.hasPrev())),
          "aria-disabled": !this.hasPrev()
        }, _prev) : null, import_react3.default.createElement("li", {
          title: showTitle ? "".concat(current, "/").concat(allPages) : null,
          className: "".concat(prefixCls, "-simple-pager")
        }, import_react3.default.createElement("input", {
          type: "text",
          value: currentInputValue,
          disabled,
          onKeyDown: this.handleKeyDown,
          onKeyUp: this.handleKeyUp,
          onChange: this.handleKeyUp,
          onBlur: this.handleBlur,
          size: 3
        }), import_react3.default.createElement("span", {
          className: "".concat(prefixCls, "-slash")
        }, "/"), allPages), import_react3.default.createElement("li", {
          title: showTitle ? locale.next_page : null,
          onClick: this.next,
          tabIndex: this.hasPrev() ? 0 : null,
          onKeyPress: this.runIfEnterNext,
          className: (0, import_classnames2.default)("".concat(prefixCls, "-next"), _defineProperty({}, "".concat(prefixCls, "-disabled"), !this.hasNext())),
          "aria-disabled": !this.hasNext()
        }, this.renderNext(nextPage)), import_react3.default.createElement(Options_default, {
          disabled,
          locale,
          rootPrefixCls: prefixCls,
          selectComponentClass,
          selectPrefixCls,
          changeSize: this.getShowSizeChanger() ? this.changePageSize : null,
          current,
          pageSize,
          pageSizeOptions,
          quickGo: this.shouldDisplayQuickJumper() ? this.handleChange : null,
          goButton: gotoButton
        }));
      }
      if (allPages <= 3 + pageBufferSize * 2) {
        var pagerProps = {
          locale,
          rootPrefixCls: prefixCls,
          onClick: this.handleChange,
          onKeyPress: this.runIfEnter,
          showTitle,
          itemRender
        };
        if (!allPages) {
          pagerList.push(import_react3.default.createElement(Pager_default, _extends({}, pagerProps, {
            key: "noPager",
            page: 1,
            className: "".concat(prefixCls, "-item-disabled")
          })));
        }
        for (var i = 1; i <= allPages; i += 1) {
          var active = current === i;
          pagerList.push(import_react3.default.createElement(Pager_default, _extends({}, pagerProps, {
            key: i,
            page: i,
            active
          })));
        }
      } else {
        var prevItemTitle = showLessItems ? locale.prev_3 : locale.prev_5;
        var nextItemTitle = showLessItems ? locale.next_3 : locale.next_5;
        var jumpPrevContent = itemRender(this.getJumpPrevPage(), "jump-prev", this.getItemIcon(jumpPrevIcon, "prev page"));
        var jumpNextContent = itemRender(this.getJumpNextPage(), "jump-next", this.getItemIcon(jumpNextIcon, "next page"));
        if (showPrevNextJumpers) {
          jumpPrev = jumpPrevContent ? import_react3.default.createElement("li", {
            title: showTitle ? prevItemTitle : null,
            key: "prev",
            onClick: this.jumpPrev,
            tabIndex: 0,
            onKeyPress: this.runIfEnterJumpPrev,
            className: (0, import_classnames2.default)("".concat(prefixCls, "-jump-prev"), _defineProperty({}, "".concat(prefixCls, "-jump-prev-custom-icon"), !!jumpPrevIcon))
          }, jumpPrevContent) : null;
          jumpNext = jumpNextContent ? import_react3.default.createElement("li", {
            title: showTitle ? nextItemTitle : null,
            key: "next",
            tabIndex: 0,
            onClick: this.jumpNext,
            onKeyPress: this.runIfEnterJumpNext,
            className: (0, import_classnames2.default)("".concat(prefixCls, "-jump-next"), _defineProperty({}, "".concat(prefixCls, "-jump-next-custom-icon"), !!jumpNextIcon))
          }, jumpNextContent) : null;
        }
        lastPager = import_react3.default.createElement(Pager_default, {
          locale,
          last: true,
          rootPrefixCls: prefixCls,
          onClick: this.handleChange,
          onKeyPress: this.runIfEnter,
          key: allPages,
          page: allPages,
          active: false,
          showTitle,
          itemRender
        });
        firstPager = import_react3.default.createElement(Pager_default, {
          locale,
          rootPrefixCls: prefixCls,
          onClick: this.handleChange,
          onKeyPress: this.runIfEnter,
          key: 1,
          page: 1,
          active: false,
          showTitle,
          itemRender
        });
        var left = Math.max(1, current - pageBufferSize);
        var right = Math.min(current + pageBufferSize, allPages);
        if (current - 1 <= pageBufferSize) {
          right = 1 + pageBufferSize * 2;
        }
        if (allPages - current <= pageBufferSize) {
          left = allPages - pageBufferSize * 2;
        }
        for (var _i = left; _i <= right; _i += 1) {
          var _active = current === _i;
          pagerList.push(import_react3.default.createElement(Pager_default, {
            locale,
            rootPrefixCls: prefixCls,
            onClick: this.handleChange,
            onKeyPress: this.runIfEnter,
            key: _i,
            page: _i,
            active: _active,
            showTitle,
            itemRender
          }));
        }
        if (current - 1 >= pageBufferSize * 2 && current !== 1 + 2) {
          pagerList[0] = (0, import_react3.cloneElement)(pagerList[0], {
            className: "".concat(prefixCls, "-item-after-jump-prev")
          });
          pagerList.unshift(jumpPrev);
        }
        if (allPages - current >= pageBufferSize * 2 && current !== allPages - 2) {
          pagerList[pagerList.length - 1] = (0, import_react3.cloneElement)(pagerList[pagerList.length - 1], {
            className: "".concat(prefixCls, "-item-before-jump-next")
          });
          pagerList.push(jumpNext);
        }
        if (left !== 1) {
          pagerList.unshift(firstPager);
        }
        if (right !== allPages) {
          pagerList.push(lastPager);
        }
      }
      var prevDisabled = !this.hasPrev() || !allPages;
      var nextDisabled = !this.hasNext() || !allPages;
      var prev = this.renderPrev(prevPage);
      var next = this.renderNext(nextPage);
      return import_react3.default.createElement("ul", _extends({
        className: (0, import_classnames2.default)(prefixCls, className, _defineProperty({}, "".concat(prefixCls, "-disabled"), disabled)),
        style,
        ref: this.paginationNode
      }, dataOrAriaAttributeProps), totalText, prev ? import_react3.default.createElement("li", {
        title: showTitle ? locale.prev_page : null,
        onClick: this.prev,
        tabIndex: prevDisabled ? null : 0,
        onKeyPress: this.runIfEnterPrev,
        className: (0, import_classnames2.default)("".concat(prefixCls, "-prev"), _defineProperty({}, "".concat(prefixCls, "-disabled"), prevDisabled)),
        "aria-disabled": prevDisabled
      }, prev) : null, pagerList, next ? import_react3.default.createElement("li", {
        title: showTitle ? locale.next_page : null,
        onClick: this.next,
        tabIndex: nextDisabled ? null : 0,
        onKeyPress: this.runIfEnterNext,
        className: (0, import_classnames2.default)("".concat(prefixCls, "-next"), _defineProperty({}, "".concat(prefixCls, "-disabled"), nextDisabled)),
        "aria-disabled": nextDisabled
      }, next) : null, import_react3.default.createElement(Options_default, {
        disabled,
        locale,
        rootPrefixCls: prefixCls,
        selectComponentClass,
        selectPrefixCls,
        changeSize: this.getShowSizeChanger() ? this.changePageSize : null,
        current,
        pageSize,
        pageSizeOptions,
        quickGo: this.shouldDisplayQuickJumper() ? this.handleChange : null,
        goButton
      }));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, prevState) {
      var newState = {};
      if ("current" in props) {
        newState.current = props.current;
        if (props.current !== prevState.current) {
          newState.currentInputValue = newState.current;
        }
      }
      if ("pageSize" in props && props.pageSize !== prevState.pageSize) {
        var _current2 = prevState.current;
        var newCurrent = calculatePage(props.pageSize, prevState, props);
        _current2 = _current2 > newCurrent ? newCurrent : _current2;
        if (!("current" in props)) {
          newState.current = _current2;
          newState.currentInputValue = _current2;
        }
        newState.pageSize = props.pageSize;
      }
      return newState;
    }
  }]);
  return Pagination2;
}(import_react3.default.Component);
_defineProperty(Pagination, "defaultProps", {
  defaultCurrent: 1,
  total: 0,
  defaultPageSize: 10,
  onChange: noop,
  className: "",
  selectPrefixCls: "rc-select",
  prefixCls: "rc-pagination",
  selectComponentClass: null,
  hideOnSinglePage: false,
  showPrevNextJumpers: true,
  showQuickJumper: false,
  showLessItems: false,
  showTitle: true,
  onShowSizeChange: noop,
  locale: zh_CN_default,
  style: {},
  itemRender: defaultItemRender,
  totalBoundaryShowSizeChanger: 50
});
var Pagination_default = Pagination;
export {
  Pagination_default as default
};
//# sourceMappingURL=rc-pagination.js.map
