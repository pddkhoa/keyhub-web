import { ClassValue } from 'clsx';
import * as React$1 from 'react';
import React__default, { RefObject } from 'react';
import * as react_jsx_runtime from 'react/jsx-runtime';
import { Menu, Tab as Tab$1 } from '@headlessui/react';
import { NumericFormat, PatternFormat, NumberFormatBase } from 'react-number-format';
export { useNumericFormat, usePatternFormat } from 'react-number-format';
import { Placement } from '@floating-ui/react';

declare function cn(...inputs: ClassValue[]): string;

declare function useCollapse(duration?: number, defaultOpen?: boolean): {
    open: boolean;
    targetEl: React$1.MutableRefObject<any>;
    openTargetEl: boolean;
    slideUp: (target: any) => void;
    slideDown: (target: any) => void;
    toggle: () => void;
};

declare const inputIconClearClasses: {
    base: string;
    size: {
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
    };
    hasSuffix: {
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
    };
};
interface FieldClearButtonProps {
    hasSuffix?: boolean;
    size?: keyof typeof inputIconClearClasses.size;
    onClick?: (event: React__default.MouseEvent) => void;
    className?: string;
}
declare function FieldClearButton({ size, onClick, hasSuffix, className, }: FieldClearButtonProps): react_jsx_runtime.JSX.Element;
declare namespace FieldClearButton {
    var displayName: string;
}

declare const fieldErrorClasses: {
    base: string;
    size: {
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
    };
};
interface FieldErrorProps extends React__default.HTMLAttributes<HTMLDivElement | HTMLSpanElement> {
    tag?: 'div' | 'span';
    error: string | null | undefined;
    size?: keyof typeof fieldErrorClasses.size;
    className?: string;
}
declare function FieldError({ tag, error, size, className, }: FieldErrorProps): react_jsx_runtime.JSX.Element;
declare namespace FieldError {
    var displayName: string;
}

declare const helperTextClasses: {
    size: {
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
    };
};
interface FieldHelperTextProps extends React__default.HTMLAttributes<HTMLDivElement | HTMLSpanElement> {
    tag?: 'div' | 'span';
    size?: keyof typeof helperTextClasses.size;
    className?: string;
}
declare function FieldHelperText({ size, tag, children, className, }: React__default.PropsWithChildren<FieldHelperTextProps>): react_jsx_runtime.JSX.Element;
declare namespace FieldHelperText {
    var displayName: string;
}

declare const classes$7: {
    base: string;
    size: {
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
    };
    rounded: {
        none: string;
        sm: string;
        DEFAULT: string;
        lg: string;
        full: string;
    };
    variant: {
        solid: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        flat: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        outline: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        text: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
    };
};
type ActionIconProps = {
    tag?: 'button' | 'span';
    /** Set the original html type of button */
    type?: 'button' | 'submit' | 'reset';
    /** Use SVG icon as a children */
    children: React__default.ReactNode;
    /** Set the loading status of button */
    isLoading?: boolean;
    /** The variants of the component are: */
    variant?: keyof typeof classes$7.variant;
    /** The size of the component. `"sm"` is equivalent to the dense button styling. */
    size?: keyof typeof classes$7.size;
    /** The rounded variants are: */
    rounded?: keyof typeof classes$7.rounded;
    /** Change button color */
    color?: keyof (typeof classes$7.variant)['solid']['color'];
    /** Add custom classes for extra style */
    className?: string;
} & React__default.ButtonHTMLAttributes<HTMLButtonElement> & React__default.HTMLAttributes<HTMLSpanElement>;
/**
 * Primary action icon button to trigger an operation. Here is the API documentation of the ActionIcon component.
 * And the rest of the props are the same as the original html button.
 * You can use props like `id`, `title`, `onClick`, `onFocus`, `onBlur` etc.
 */
declare const ActionIcon: React__default.ForwardRefExoticComponent<{
    tag?: "button" | "span" | undefined;
    /** Set the original html type of button */
    type?: "button" | "submit" | "reset" | undefined;
    /** Use SVG icon as a children */
    children: React__default.ReactNode;
    /** Set the loading status of button */
    isLoading?: boolean | undefined;
    /** The variants of the component are: */
    variant?: "text" | "solid" | "flat" | "outline" | undefined;
    /** The size of the component. `"sm"` is equivalent to the dense button styling. */
    size?: "sm" | "DEFAULT" | "lg" | "xl" | undefined;
    /** The rounded variants are: */
    rounded?: "none" | "sm" | "DEFAULT" | "lg" | "full" | undefined;
    /** Change button color */
    color?: "DEFAULT" | "primary" | "secondary" | "danger" | "info" | "success" | "warning" | undefined;
    /** Add custom classes for extra style */
    className?: string | undefined;
} & React__default.ButtonHTMLAttributes<HTMLButtonElement> & React__default.HTMLAttributes<HTMLSpanElement> & React__default.RefAttributes<HTMLButtonElement>>;

interface AdvancedCheckboxProps extends React__default.InputHTMLAttributes<HTMLInputElement> {
    /** Add className to style the container */
    className?: string;
    /** Add inputClassName to style the input */
    inputClassName?: string;
    /** Pass content as children */
    children: React__default.ReactNode;
    /** Add helper text. It could be string or a React component */
    helperText?: React__default.ReactNode;
    /** Show error message using this prop */
    error?: string;
    /** This prop allows you to customize the error message style */
    errorClassName?: string;
    /** This prop allows you to customize the helper message style */
    helperClassName?: string;
}
/**
 * A basic widget for getting the user input of checkbox with advanced design.
 * Here is the API documentation of the AdvancedCheckbox component.
 * And the rest of the props of AdvancedCheckbox are the same as the original html input field.
 * You can use props like `value`, `name`, `disabled` etc.
 */
declare const AdvancedCheckbox: React__default.ForwardRefExoticComponent<AdvancedCheckboxProps & React__default.RefAttributes<HTMLInputElement>>;

interface AdvancedRadioProps extends React__default.InputHTMLAttributes<HTMLInputElement> {
    /** Add className to style the container */
    className?: string;
    /** Add inputClassName to style the input */
    inputClassName?: string;
    /** Pass content as children */
    children: React__default.ReactNode;
    /** Add helper text. It could be string or a React component */
    helperText?: React__default.ReactNode;
    /** Show error message using this prop */
    error?: string;
    /** This prop allows you to customize the error message style */
    errorClassName?: string;
    /** This prop allows you to customize the helper message style */
    helperClassName?: string;
}
/**
 * A basic widget for getting the user input of radio with advanced design.
 * Here is the API documentation of the AdvancedRadio component.
 * And the rest of the props of AdvancedRadio are the same as the original html input field.
 * You can use props like `value`, `name`, `disabled` etc.
 */
declare const AdvancedRadio: React__default.ForwardRefExoticComponent<AdvancedRadioProps & React__default.RefAttributes<HTMLInputElement>>;

declare const classes$6: {
    base: string;
    size: {
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
    };
    rounded: {
        none: string;
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
    };
    leftPadding: {
        base: string;
        size: {
            sm: string;
            DEFAULT: string;
            lg: string;
            xl: string;
        };
    };
    rightPadding: {
        base: string;
        size: {
            sm: string;
            DEFAULT: string;
            lg: string;
            xl: string;
        };
    };
    variant: {
        flat: {
            base: string;
            color: {
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        outline: {
            base: string;
            color: {
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
    };
};
type AlertProps = {
    /** The size of the component. */
    size?: keyof typeof classes$6.size;
    /** The rounded variants are: */
    rounded?: keyof typeof classes$6.rounded;
    /** The variants of the component are: */
    variant?: keyof typeof classes$6.variant;
    /** Change input color */
    color: keyof typeof classes$6.variant.flat.color;
    /** Whether left bar should be visible */
    bar?: boolean;
    /** Pass alert message as children */
    children: React__default.ReactNode;
    /** Add closable option */
    closable?: boolean;
    /** Pass onClick function to clear alert */
    onClose?: (event: React__default.MouseEvent) => void;
    /** Customize start icon according to your preference */
    icon?: React__default.ReactNode;
    /** Customize close icon according to your preference */
    closeIcon?: React__default.ReactNode;
    /** Add className to design the container */
    className?: string;
    /** Add barClassName to design the left bar */
    barClassName?: string;
    /** Add iconContainerClassName to position the icons */
    iconContainerClassName?: string;
    /** Add iconClassName to design the default icons */
    iconClassName?: string;
};
/**
 * A simple alert component for showing alert message. Here is the API documentation of the Alert component.
 * You can use the following props to create a demo for alert.
 */
declare function Alert({ size, rounded, variant, color, bar, children, closable, onClose, icon, closeIcon, className, barClassName, iconContainerClassName, iconClassName, }: AlertProps): react_jsx_runtime.JSX.Element;
declare namespace Alert {
    var displayName: string;
}

declare const classes$5: {
    base: string;
    bgColor: {
        white: string;
        gray: string;
    };
    size: {
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
    };
    rounded: {
        none: string;
        sm: string;
        md: string;
        lg: string;
        DEFAULT: string;
    };
    color: {
        DEFAULT: string;
        primary: string;
        secondary: string;
        danger: string;
        info: string;
        success: string;
        warning: string;
    };
};
interface AnnouncementProps {
    /** Size of the component */
    size?: keyof typeof classes$5.size;
    /** The rounded variants are: */
    rounded?: keyof typeof classes$5.rounded;
    /** Choose color variations */
    color?: keyof typeof classes$5.color;
    /** Background color of the component */
    bgColor?: keyof typeof classes$5.bgColor;
    /** Pass badge text to have badge at the beginning */
    badgeText?: string;
    /** Pass highlighted text at the beginning */
    highlightedText?: string;
    /** Pass className to customize announcement design */
    className?: string;
    /** Place icon at the beginning */
    startIcon?: React__default.ReactNode;
    /** Place icon at the end */
    endIcon?: React__default.ReactNode;
    /** Pass badgeClassName to style badge */
    badgeClassName?: string;
    /** Pass hightlightedTextClassName to style highlighted text */
    highlightedTextClassName?: string;
}
declare const Announcement: {
    ({ size, rounded, color, bgColor, badgeText, highlightedText, children, startIcon, endIcon, className, badgeClassName, highlightedTextClassName, }: React__default.PropsWithChildren<AnnouncementProps>): react_jsx_runtime.JSX.Element;
    displayName: string;
};

declare const classes$4: {
    base: string;
    size: {
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
    };
    fontSize: {
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
    };
    rounded: {
        none: string;
        sm: string;
        md: string;
        lg: string;
        full: string;
    };
    color: {
        DEFAULT: string;
        invert: string;
        primary: string;
        secondary: string;
        success: string;
        warning: string;
        danger: string;
        info: string;
    };
};
type AvatarProps = {
    src?: string;
    name: string;
    initials?: string;
    size?: keyof typeof classes$4.size;
    customSize?: string | number;
    rounded?: keyof typeof classes$4.rounded;
    color?: keyof typeof classes$4.color;
    onClick?: () => void;
    className?: string;
};
declare function Avatar({ src, name, size, initials, customSize, rounded, color, onClick, className, }: AvatarProps): react_jsx_runtime.JSX.Element;
declare namespace Avatar {
    var displayName: string;
}

declare const classes$3: {
    base: string;
    outlineRing: string;
    size: {
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
    };
    dot: {
        size: {
            sm: string;
            DEFAULT: string;
            lg: string;
            xl: string;
        };
    };
    rounded: {
        none: string;
        sm: string;
        md: string;
        lg: string;
        DEFAULT: string;
    };
    variant: {
        solid: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                success: string;
                warning: string;
                danger: string;
                info: string;
            };
        };
        flat: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                success: string;
                warning: string;
                danger: string;
                info: string;
            };
        };
        outline: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                success: string;
                warning: string;
                danger: string;
                info: string;
            };
        };
    };
};
type BadgeProps = {
    /** Change badge color */
    color?: keyof (typeof classes$3.variant)['solid']['color'];
    /** The variants of the component are: */
    variant?: keyof typeof classes$3.variant;
    /** The size of the component. `"sm"` is equivalent to the dense badge styling. */
    size?: keyof typeof classes$3.size;
    /** Render badge as a dot */
    renderAsDot?: boolean;
    /** Set a outline ring. It is useful for the overlapping UI. */
    enableOutlineRing?: boolean;
    /** The rounded variants are: */
    rounded?: keyof typeof classes$3.rounded;
    /** Add custom classes for extra style */
    className?: string;
};
/**
 * Badge is a small overlapped UI item which indicates a status, notification, or event that appears in relativity with the underlying object.
 */
declare function Badge({ renderAsDot, size, color, variant, rounded, enableOutlineRing, children, className, ...props }: React__default.PropsWithChildren<BadgeProps>): react_jsx_runtime.JSX.Element;
declare namespace Badge {
    var displayName: string;
}

declare const buttonClasses: {
    base: string;
    size: {
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
    };
    rounded: {
        none: string;
        sm: string;
        DEFAULT: string;
        lg: string;
        pill: string;
    };
    variant: {
        solid: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        flat: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        outline: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        text: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
    };
};
type ButtonProps = {
    tag?: 'button' | 'span';
    /** Set the loading status of button */
    isLoading?: boolean;
    /** Set the original html type of button */
    type?: 'button' | 'submit' | 'reset';
    /** The variants of the component are: */
    variant?: keyof typeof buttonClasses.variant;
    /** The size of the component. `"sm"` is equivalent to the dense button styling. */
    size?: keyof typeof buttonClasses.size;
    /** The rounded variants are: */
    rounded?: keyof typeof buttonClasses.rounded;
    /** Change button color */
    color?: keyof (typeof buttonClasses.variant)['solid']['color'];
    /** Disable state */
    disabled?: boolean;
    /** Add custom classes for extra style */
    className?: string;
} & React__default.ButtonHTMLAttributes<HTMLButtonElement> & React__default.HTMLAttributes<HTMLSpanElement>;
/**
 * Primary action button to trigger an operation. Here is the API documentation of the Button component.
 * And the rest of the props of Button are the same as the original html button.
 * You can use props like `id`, `title`, `onClick`, `onFocus`, `onBlur`, `children` etc.
 */
declare const Button: React__default.ForwardRefExoticComponent<{
    tag?: "button" | "span" | undefined;
    /** Set the loading status of button */
    isLoading?: boolean | undefined;
    /** Set the original html type of button */
    type?: "button" | "submit" | "reset" | undefined;
    /** The variants of the component are: */
    variant?: "text" | "solid" | "flat" | "outline" | undefined;
    /** The size of the component. `"sm"` is equivalent to the dense button styling. */
    size?: "sm" | "DEFAULT" | "lg" | "xl" | undefined;
    /** The rounded variants are: */
    rounded?: "none" | "sm" | "DEFAULT" | "lg" | "pill" | undefined;
    /** Change button color */
    color?: "DEFAULT" | "primary" | "secondary" | "danger" | "info" | "success" | "warning" | undefined;
    /** Disable state */
    disabled?: boolean | undefined;
    /** Add custom classes for extra style */
    className?: string | undefined;
} & React__default.ButtonHTMLAttributes<HTMLButtonElement> & React__default.HTMLAttributes<HTMLSpanElement> & React__default.RefAttributes<HTMLButtonElement>>;

declare const inputClasses$4: {
    base: string;
    size: {
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
    };
    rounded: {
        none: string;
        sm: string;
        DEFAULT: string;
        lg: string;
        circle: string;
    };
    variant: {
        outline: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        flat: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        active: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
    };
};
interface CheckboxProps extends Omit<React__default.InputHTMLAttributes<HTMLInputElement>, 'size'> {
    /** The variants of the component are: */
    variant?: keyof typeof inputClasses$4.variant;
    /** The size of the component. `"sm"` is equivalent to the dense input styling. */
    size?: keyof typeof inputClasses$4.size;
    /** Change input color */
    color?: keyof (typeof inputClasses$4.variant)['outline']['color'];
    /** The rounded variants are: */
    rounded?: keyof typeof inputClasses$4.rounded;
    /** Available directions of the label are: */
    labelPlacement?: 'start' | 'end';
    /** Whether the input is disabled */
    disabled?: boolean;
    /** Set field label */
    label?: React__default.ReactNode;
    /** Show error message using this prop */
    error?: string;
    /** Add helper text. It could be string or a React component */
    helperText?: React__default.ReactNode;
    /** Use className prop to apply style for entire component */
    className?: string;
    /** Use activeClassName prop to apply style on active component from checkboxGroup */
    activeClassName?: string;
    /** Use containerClassName prop to apply some additional style for label and checkbox container */
    containerClassName?: string;
    /** Use iconClassName prop to apply some additonal style for check mark icon */
    iconClassName?: string;
    /** Use labelClassName prop to apply some addition style for the field label */
    labelClassName?: string;
    /** Add custom classes for the input filed extra style */
    inputClassName?: string;
    /** This prop allows you to customize the error message style */
    errorClassName?: string;
    /** This prop allows you to customize the helper message style */
    helperClassName?: string;
}
/**
 * A basic widget for getting the user input of checkbox. Here is the API documentation of the Checkbox component.
 * And the rest of the props of Checkbox are the same as the original html input field.
 * You can use props like `value`, `disabled`, `onChange`, `onFocus`, `onBlur` etc.
 */
declare const Checkbox: React__default.ForwardRefExoticComponent<CheckboxProps & React__default.RefAttributes<HTMLInputElement>>;

interface CheckboxGroupProps extends React__default.HTMLAttributes<HTMLDivElement> {
    /** Selected value */
    values: string[];
    /** Pass function to select value */
    setValues: React__default.Dispatch<React__default.SetStateAction<string[]>>;
    /** Radio buttons as children */
    children: React__default.ReactNode;
}
/**
 * CheckboxGroup is a wrapper component for a set of checkbox which allows
 * user to select multiple checkbox values easily either from a form or from a filter.
 * Here is the API documentation for CheckboxGroup component.
 */
declare function CheckboxGroup({ values, setValues, children, ...props }: CheckboxGroupProps): react_jsx_runtime.JSX.Element;
declare namespace CheckboxGroup {
    var displayName: string;
}

interface CollapseHeader {
    /** Whether or not the `Collapse` is open. */
    open?: boolean;
    /** A callback function to collapsed and expanded `Collapse` panel with transition */
    toggle: () => void;
}
interface CollapseProps {
    /** Set HTML tag of the `Collapse` component. Either `div` Or `ul`, default is `div` */
    tag?: 'div' | 'ul';
    /** Header component of the `Collapse` */
    header: ({ open, toggle }: CollapseHeader) => React__default.ReactNode;
    /** Set transition duration */
    duration?: number;
    /** Initial active panel */
    defaultOpen?: boolean;
    /** Add custom classes to the `Collapse` panel for extra style */
    panelClassName?: string;
    /** Add custom classes to the `Collapse` component for extra style */
    className?: string;
}
/**
 * A content area which can be collapsed and expanded.
 * Completely unstyled, fully accessible UI components,
 * designed to integrate beautifully with Tailwind CSS.
 */
declare function Collapse({ tag, header, duration, defaultOpen, panelClassName, className, children, }: React__default.PropsWithChildren<CollapseProps>): react_jsx_runtime.JSX.Element;
declare namespace Collapse {
    var displayName: string;
}

declare const drawerClasses: {
    overlay: string;
    placement: {
        top: string;
        right: string;
        bottom: string;
        left: string;
    };
    sizeOfYAxisDrawer: {
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
        full: string;
    };
    sizeOfXAxisDrawer: {
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
        full: string;
    };
};
type DrawerSize = 'sm' | 'DEFAULT' | 'lg' | 'xl' | 'full';
type DrawerProps = {
    /** Whether the Drawer is open or not */
    isOpen: boolean;
    /** Called when drawer is closed (Escape key and click outside, depending on options) */
    onClose(): void;
    /** Drawer can be placed on left (default), top, right and bottom. Control drawer position with placement prop: */
    placement?: keyof typeof drawerClasses.placement;
    /** Preset size of drawer is sm, DEFAULT, lg, xl, full */
    size?: DrawerSize;
    /** Size prop will not work when you are using customSize prop. Here is the example of using this prop -> customSize="500px" or customSize="90%" */
    customSize?: string;
    /** Override default CSS style of Drawer's overlay */
    overlayClassName?: string;
    /** Set custom style classes for the Drawer container, where you can set custom Drawer size and padding and background color */
    containerClassName?: string;
    /** Set custom style classes for the Drawer root element */
    className?: string;
};
/**
 * Display overlay area at any side of the screen
 */
declare function Drawer({ isOpen, onClose, size, placement, customSize, overlayClassName, containerClassName, className, children, }: React__default.PropsWithChildren<DrawerProps>): react_jsx_runtime.JSX.Element;
declare namespace Drawer {
    var displayName: string;
}

type ExtractProps<T> = T extends React.ComponentType<infer P> ? P : T;

declare const dropdownClasses: {
    rounded: {
        none: string;
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
    };
    shadow: {
        none: string;
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
    };
};
type DropdownProps = ExtractProps<typeof Menu> & {
    /** Add trigger in dropdown button */
    trigger: React__default.ReactNode;
    /** The rounded variants supported by this component are: */
    rounded?: keyof typeof dropdownClasses.rounded;
    /** The shadow variants supported by this component are: */
    shadow?: keyof typeof dropdownClasses.shadow;
    /** Dropdown item as children */
    children: React__default.ReactNode;
    /** Add className to customize design for container of dropdown button and items */
    className?: string;
    /** Add dropdownButtonClassName to design dropdown button */
    dropdownButtonClassName?: string;
    /** Add dropdownClassName to design container for dropdown items */
    dropdownClassName?: string;
};
/**
 * A floating container which will appear on clicking the dropdown button.
 * Here is the API documentation of the Dropdown component.
 * You can use the following props to create a dropdown.
 */
declare function Dropdown({ trigger, rounded, shadow, children, className, dropdownButtonClassName, dropdownClassName, }: DropdownProps): react_jsx_runtime.JSX.Element;
declare namespace Dropdown {
    var displayName: string;
}

type DropdownItemRenderProps = {
    /** Whether or not the item is the active/focused in the list. */
    active: boolean;
    /** Whether or not the item is disabled for keyboard navigation and ARIA purposes. */
    disabled: boolean;
};
type DropdownItemProps = {
    /** Pass children for dropdown items */
    children: ({ active, disabled }: DropdownItemRenderProps) => React__default.ReactNode;
    /** Add className to design each item in the dropdown */
    className?: string;
    /** Add activeClassName to design the currently active item */
    activeClassName?: string;
    /** Add disabledClassName to design the disabled item */
    disabledClassName?: string;
};
/** A component for adding items in the dropdown.
 * Should be used inside Dropdown component.
 * Here is the API Documentation for DropdownItem Component.
 */
declare const DropdownItem: {
    ({ className, children, activeClassName, disabledClassName, }: DropdownItemProps): react_jsx_runtime.JSX.Element;
    displayName: string;
};

declare const emptyStyles: {
    base: string;
    alignment: {
        start: string;
        center: string;
        end: string;
    };
};
type EmptyTextTagProps = 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'p';
interface EmptyProps {
    image?: React__default.ReactNode;
    imageClassName?: string;
    defaultImageClassName?: string;
    text?: string;
    textAs?: EmptyTextTagProps;
    textClassName?: string;
    alignment?: keyof typeof emptyStyles.alignment;
    className?: string;
}
declare function Empty({ image, className, text, textAs, imageClassName, textClassName, alignment, defaultImageClassName, children, }: React__default.PropsWithChildren<EmptyProps>): react_jsx_runtime.JSX.Element;
declare namespace Empty {
    var displayName: string;
}

interface EmptySVGIconProps {
    className?: string;
}
declare function EmptyBoxIcon({ className }: EmptySVGIconProps): react_jsx_runtime.JSX.Element;
declare function EmptyProductBoxIcon({ className, }: EmptySVGIconProps): react_jsx_runtime.JSX.Element;
declare function SearchNotFoundIcon({ className, }: EmptySVGIconProps): react_jsx_runtime.JSX.Element;

declare const fileInputClasses: {
    base: string;
    disabled: string;
    error: string;
    size: {
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
    };
    rounded: {
        none: string;
        sm: string;
        DEFAULT: string;
        lg: string;
        pill: string;
    };
    variant: {
        active: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        flat: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        outline: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        text: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
    };
};
interface FileInputProps extends Omit<React__default.InputHTMLAttributes<HTMLInputElement>, 'size' | 'type'> {
    /** The variants of the component are: */
    variant?: keyof typeof fileInputClasses.variant;
    /** The size of the component. `"sm"` is equivalent to the dense input styling. */
    size?: keyof typeof fileInputClasses.size;
    /** The rounded variants are: */
    rounded?: keyof typeof fileInputClasses.rounded;
    /** Change input color */
    color?: keyof (typeof fileInputClasses.variant)['active']['color'];
    /** Set input placeholder text */
    placeholder?: string;
    /** Whether the input is disabled */
    disabled?: boolean;
    /** Set field label */
    label?: React__default.ReactNode;
    /** add clearable option */
    clearable?: boolean;
    /** clear event */
    onClear?: (event: React__default.MouseEvent) => void;
    /** Add helper text. It could be string or a React component */
    helperText?: React__default.ReactNode;
    /** Show error message using this prop */
    error?: string;
    /** Override default CSS style of label */
    labelClassName?: string;
    /** Override default CSS style of input */
    inputClassName?: string;
    /** Override default CSS style of helperText */
    helperClassName?: string;
    /** Override default CSS style of error message */
    errorClassName?: string;
}
/**
 * A basic widget for getting the user input. Here is the API documentation of the Input component.
 * And the rest of the props are the same as the original html input field.
 * You can use props like `value`, `disabled`, `placeholder`, `onChange`, `onFocus`, `onBlur` etc.
 */
declare const FileInput: React__default.ForwardRefExoticComponent<FileInputProps & React__default.RefAttributes<HTMLInputElement>>;

declare const inputClasses$3: {
    base: string;
    disabled: string;
    error: string;
    size: {
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
    };
    rounded: {
        none: string;
        sm: string;
        DEFAULT: string;
        lg: string;
        pill: string;
    };
    variant: {
        active: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        flat: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        outline: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        text: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
    };
};
interface InputProps extends Omit<React__default.InputHTMLAttributes<HTMLInputElement>, 'size' | 'type' | 'prefix' | 'suffix'> {
    /** This Input component only support these types */
    type?: 'text' | 'email' | 'number' | 'tel' | 'search' | 'url' | 'time' | 'date' | 'week' | 'month' | 'datetime-local';
    /** The variants of the component are: */
    variant?: keyof typeof inputClasses$3.variant;
    /** The size of the component. `"sm"` is equivalent to the dense input styling. */
    size?: keyof typeof inputClasses$3.size;
    /** The rounded variants are: */
    rounded?: keyof typeof inputClasses$3.rounded;
    /** Change input color */
    color?: keyof (typeof inputClasses$3.variant)['active']['color'];
    /** Set input placeholder text */
    placeholder?: string;
    /** Whether the input is disabled */
    disabled?: boolean;
    /** Set field label */
    label?: React__default.ReactNode;
    /** add clearable option */
    clearable?: boolean;
    /** clear event */
    onClear?: (event: React__default.MouseEvent) => void;
    /** The prefix is design for adding any icon or text on the Input field's start (it's a left icon for the `ltr` and right icon for the `rtl`) */
    prefix?: React__default.ReactNode;
    /** The suffix is design for adding any icon or text on the Input field's end (it's a right icon for the `ltr` and left icon for the `rtl`) */
    suffix?: React__default.ReactNode;
    /** Add helper text. It could be string or a React component */
    helperText?: React__default.ReactNode;
    /** Show error message using this prop */
    error?: string;
    /** Override default CSS style of label */
    labelClassName?: string;
    /** Override default CSS style of input */
    inputClassName?: string;
    /** Override default CSS style of prefix */
    prefixClassName?: string;
    /** Override default CSS style of suffix */
    suffixClassName?: string;
    /** Override default CSS style of helperText */
    helperClassName?: string;
    /** Override default CSS style of error message */
    errorClassName?: string;
}
/**
 * A basic widget for getting the user input. Here is the API documentation of the Input component.
 * And the rest of the props are the same as the original html input field.
 * You can use props like `value`, `disabled`, `placeholder`, `onChange`, `onFocus`, `onBlur` etc.
 */
declare const Input: React__default.ForwardRefExoticComponent<InputProps & React__default.RefAttributes<HTMLInputElement>>;

declare const animations: {
    blink: string;
    scaleUp: string;
};
declare const sizes: {
    sm: string;
    DEFAULT: string;
    lg: string;
    xl: string;
};
declare const colors: {
    DEFAULT: string;
    primary: string;
    secondary: string;
    danger: string;
    info: string;
    success: string;
    warning: string;
    current: string;
};
type LoaderSizeTypes = keyof typeof sizes;
type LoaderColorTypes = keyof typeof colors;
type LoaderAnimationTypes = keyof typeof animations;
interface LoaderTypes extends React__default.HTMLAttributes<HTMLDivElement | HTMLSpanElement> {
    /** HTML tag supports */
    tag?: 'div' | 'span';
    /** Set loader size */
    size?: LoaderSizeTypes;
    /** Change loader color */
    color?: LoaderColorTypes;
    /** Animation variants are */
    animation?: LoaderAnimationTypes;
    /** Add custom classes for extra style */
    className?: string;
}
/**
 * A loader for displaying loading state of a page or a section.
 */
declare function Loader({ tag, size, color, animation, className, }: LoaderTypes): react_jsx_runtime.JSX.Element;
declare namespace Loader {
    var displayName: string;
}

declare const modalClasses: {
    overlay: string;
    size: {
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
        full: string;
    };
    rounded: {
        none: string;
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
    };
};
type ModalSize = 'sm' | 'DEFAULT' | 'lg' | 'xl' | 'full';
type ModalProps = {
    /** Whether the Modal is open or not */
    isOpen: boolean;
    /** Called when modal is closed (Escape key and click outside, depending on options) */
    onClose(): void;
    /** Preset size of modal is sm, DEFAULT, lg, xl, full */
    size?: ModalSize;
    /** The rounded variants are: */
    rounded?: keyof typeof modalClasses.rounded;
    /** Size prop will not work when you are using customSize prop. Here is the example of using this prop -> customSize="500px" or customSize="90%" */
    customSize?: string;
    /** This prop will remove extra padding spacing from screen */
    noGutter?: boolean;
    /** Override default CSS style of Modal's overlay */
    overlayClassName?: string;
    /** Set custom style classes for the Modal container, where you can set custom Modal size and padding and background color */
    containerClassName?: string;
    /** Set custom style classes for the Modal root element */
    className?: string;
};
/**
 * A fully-managed renderless Modal component. When requiring users to interact with the application, but without jumping to a new page and interrupting the user's workflow, you can use Modal to create a new floating layer over the current page to get user feedback or display information.
 */
declare function Modal({ isOpen, onClose, size, rounded, noGutter, customSize, overlayClassName, containerClassName, className, children, }: React__default.PropsWithChildren<ModalProps>): react_jsx_runtime.JSX.Element;
declare namespace Modal {
    var displayName: string;
}

declare const labelClasses$2: {
    size: {
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
    };
};
declare const selectClasses: {
    base: string;
    disabled: string;
    error: string;
    size: {
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
    };
    rounded: {
        none: string;
        sm: string;
        DEFAULT: string;
        lg: string;
        pill: string;
    };
    variant: {
        active: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        flat: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        outline: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        text: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
    };
};
type OptionType = {
    value: string;
    label?: string;
    selected?: boolean;
    disabled?: boolean;
    [key: string]: any;
};
interface NativeSelectProps extends Omit<React__default.SelectHTMLAttributes<HTMLSelectElement>, 'size' | 'multiple' | 'prefix' | 'suffix'> {
    /** Options for select */
    options: (string | OptionType)[];
    /** Whether the select is disabled */
    disabled?: boolean;
    /** Set field label */
    label?: React__default.ReactNode;
    /** Set select placeholder text */
    placeholder?: string;
    /** The size of the component. `"sm"` is equivalent to the dense select styling. */
    size?: keyof typeof labelClasses$2.size;
    /** The rounded variants are: */
    rounded?: keyof typeof selectClasses.rounded;
    /** The variants of the component are: */
    variant?: keyof typeof selectClasses.variant;
    /** Change select color */
    color?: keyof (typeof selectClasses.variant)['outline']['color'];
    /** add clearable option */
    clearable?: boolean;
    /** clear event */
    onClear?: (event: React__default.MouseEvent) => void;
    /** The prefix is design for adding any icon or text on the select field's start (it's a left icon for the `ltr` and right icon for the `rtl`) */
    prefix?: React__default.ReactNode;
    /** The suffix is design for adding any icon or text on the select field's end (it's a right icon for the `ltr` and left icon for the `rtl`) */
    suffix?: React__default.ReactNode;
    /** Show error message using this prop */
    error?: string;
    /** Add helper text. It could be string or a React component */
    helperText?: React__default.ReactNode;
    /** Add custom classes for container */
    className?: string;
    /** Use labelClassName prop to do some addition style for the field label */
    labelClassName?: string;
    /** Add custom classes for select */
    selectClassName?: string;
    /** Override default CSS style of prefix */
    prefixClassName?: string;
    /** Override default CSS style of suffix */
    suffixClassName?: string;
    /** This prop allows you to customize the error message style */
    errorClassName?: string;
    /** This prop allows you to customize the helper text message style */
    helperClassName?: string;
}
/**
 * A basic widget for user selection of the options. Here is the API documentation of the Native Select component.
 * And the rest of the props of Native Select are the same as the original html select tag.
 * You can use props like `disabled`, `name` etc.
 */
declare const NativeSelect: React__default.ForwardRefExoticComponent<NativeSelectProps & React__default.RefAttributes<HTMLSelectElement>>;

type NumberInputProps = (ExtractProps<typeof NumericFormat> | ExtractProps<typeof PatternFormat> | ExtractProps<typeof NumberFormatBase>) & {
    /** These are the format types of the component */
    formatType: 'numeric' | 'pattern' | 'custom';
};
/**
 * We used `react-number-format` package to build the NumberInput component.
 * See their [official documentation](https://s-yadav.github.io/react-number-format/docs/intro) for more info.
 */
declare const NumberInput: {
    ({ formatType, ...props }: NumberInputProps): react_jsx_runtime.JSX.Element;
    displayName: string;
};

declare const inputClasses$2: {
    base: string;
    disabled: string;
    error: string;
    size: {
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
    };
    rounded: {
        none: string;
        sm: string;
        DEFAULT: string;
        lg: string;
        pill: string;
    };
    variant: {
        active: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        flat: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        outline: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        text: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
    };
};
interface PasswordProps extends Omit<React__default.InputHTMLAttributes<HTMLInputElement>, 'size' | 'type' | 'prefix'> {
    /** The variants of the component are: */
    variant?: keyof typeof inputClasses$2.variant;
    /** The size of the component. `"sm"` is equivalent to the dense input styling. */
    size?: keyof typeof inputClasses$2.size;
    /** The rounded variants are: */
    rounded?: keyof typeof inputClasses$2.rounded;
    /** Change input color */
    color?: keyof (typeof inputClasses$2.variant)['active']['color'];
    /** Set input placeholder text */
    placeholder?: string;
    /** Whether the input is disabled */
    disabled?: boolean;
    /** Set field label */
    label?: React__default.ReactNode;
    /** add clearable option */
    clearable?: boolean;
    /** clear event */
    onClear?: (event: React__default.MouseEvent) => void;
    /** The prefix is design for adding any icon or text on the Input field's start (it's a left icon for the `ltr` and right icon for the `rtl`) */
    prefix?: React__default.ReactNode;
    /** It is the password visibility toggle icon.  */
    visibilityToggleIcon?(visible: boolean): React__default.ReactNode;
    /** Add helper text. It could be string or a React component */
    helperText?: React__default.ReactNode;
    /** Show error message using this prop */
    error?: string;
    /** Override default CSS style of label */
    labelClassName?: string;
    /** Override default CSS style of input */
    inputClassName?: string;
    /** Override default CSS style of prefix */
    prefixClassName?: string;
    /** Override default CSS style of password show/hide toggle icon */
    visibilityToggleIconClassName?: string;
    /** Override default CSS style of helperText */
    helperClassName?: string;
    /** Override default CSS style of error message */
    errorClassName?: string;
}
/**
 * A basic widget for getting the user input. Here is the API documentation of the Password component.
 * And the rest of the props are the same as the original html input field type password.
 * You can use props like `value`, `disabled`, `placeholder`, `onChange`, `onFocus`, `onBlur` etc.
 */
declare const Password: React__default.ForwardRefExoticComponent<PasswordProps & React__default.RefAttributes<HTMLInputElement>>;

declare const inputClasses$1: {
    base: string;
    error: string;
    size: {
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
    };
    rounded: {
        none: string;
        sm: string;
        DEFAULT: string;
        lg: string;
        full: string;
    };
    variant: {
        active: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        flat: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        outline: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
    };
};
interface PinCodeProps extends Omit<React__default.InputHTMLAttributes<HTMLInputElement>, 'size' | 'type' | 'value'> {
    /** Pass setState to get back the pin code value */
    setValue: React__default.Dispatch<React__default.SetStateAction<string | number | undefined>>;
    /** This Pin Code component only support these two types */
    type?: 'text' | 'number';
    /** Mask and unmask to hide and show pin code */
    mask?: boolean;
    /** Set pin code length */
    length?: number;
    /** Make pin code horizontally center */
    center?: boolean;
    /** Set placeholder text */
    placeholder?: string;
    /** The size of the component. `"sm"` is equivalent to the dense input styling. */
    size?: keyof typeof inputClasses$1.size;
    /** The rounded variants are: */
    rounded?: keyof typeof inputClasses$1.rounded;
    /** The variants of the component are: */
    variant?: keyof typeof inputClasses$1.variant;
    /** Change input color */
    color?: keyof (typeof inputClasses$1.variant)['active']['color'];
    /** Show error message using this prop */
    error?: string;
    /** Add custom classes for the input filed extra style */
    inputClassName?: string;
    /** This prop allows you to customize the error message style */
    errorClassName?: string;
}
/**
 * A basic widget for getting pin code. Here is the API documentation of the Pin Code component.
 * And the rest of the props of PinCode are the same as the original html input field.
 * You can use props like `disabled`, `placeholder`, `defaultValue` etc.
 */
declare function PinCode({ type, defaultValue, mask, length, setValue, center, size, rounded, variant, color, placeholder, error, className, inputClassName, errorClassName, ...props }: PinCodeProps): react_jsx_runtime.JSX.Element;
declare namespace PinCode {
    var displayName: string;
}

declare const tooltipClasses: {
    base: string;
    shadow: {
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
    };
    size: {
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
    };
    rounded: {
        none: string;
        sm: string;
        DEFAULT: string;
        lg: string;
        pill: string;
    };
    arrow: {
        color: {
            DEFAULT: string;
            invert: string;
            primary: string;
            secondary: string;
            danger: string;
            info: string;
            success: string;
            warning: string;
        };
    };
    variant: {
        solid: {
            base: string;
            color: {
                DEFAULT: string;
                invert: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
    };
};
declare const tooltipAnimation: {
    fadeIn: {
        initial: {
            opacity: number;
        };
        close: {
            opacity: number;
        };
    };
    zoomIn: {
        initial: {
            opacity: number;
            transform: string;
        };
        close: {
            opacity: number;
            transform: string;
        };
    };
    slideIn: {
        initial: {
            opacity: number;
            transform: string;
        };
        close: {
            opacity: number;
            transform: string;
        };
    };
};
type Content = {
    open: boolean;
    setOpen: React__default.Dispatch<React__default.SetStateAction<boolean>>;
};
type TooltipProps = {
    /** Pass open state to open the floating element */
    isOpen?: boolean;
    /** Pass setOpen to set open value */
    setIsOpen?: React__default.Dispatch<React__default.SetStateAction<boolean>>;
    /** Pass children which will have tooltip */
    children: JSX.Element & {
        ref?: RefObject<any>;
    };
    /** Content for tooltip */
    content: ({ open, setOpen }: Content) => React__default.ReactNode;
    /** Change Tooltip color */
    color?: keyof typeof tooltipClasses.variant.solid.color;
    /** Supported Tooltip sizes are: */
    size?: keyof typeof tooltipClasses.size;
    /** The rounded variants are: */
    rounded?: keyof typeof tooltipClasses.rounded;
    /** Supported tooltip shadows are: */
    shadow?: keyof typeof tooltipClasses.shadow;
    /** Supported Tooltip Placements are: */
    placement?: Placement;
    /** Set custom offset default is 8 */
    gap?: number;
    /** Supported Animations are: */
    animation?: keyof typeof tooltipAnimation;
    /** Add custom classes for Tooltip container or content */
    className?: string;
    /** Add custom classes for Tooltip arrow */
    tooltipArrowClassName?: string;
    /** Whether tooltip arrow should be shown or hidden */
    showArrow?: boolean;
    /** Whether the tooltip is used as a popover component or not */
    isPopover?: boolean;
};
/**
 * Tooltip displays informative text when users hover, focus, or click an element.
 * Here is the API documentation of the Tooltip component.
 * You can use the following props to create a demo of tooltip.
 */
declare function Tooltip({ isOpen, setIsOpen, children, content, gap, animation, placement, size, rounded, shadow, color, className, tooltipArrowClassName, showArrow, isPopover, }: TooltipProps): react_jsx_runtime.JSX.Element;
declare namespace Tooltip {
    var displayName: string;
}

type PopoverProps = Omit<TooltipProps, 'isPopover' | 'color'>;
/**
 * Popover is a simple dialog alert which can have details of the content.
 * It can either have a confirm, cancel button or any action that can be triggered by the user's decision.
 */
declare function Popover({ children, ...props }: PopoverProps): react_jsx_runtime.JSX.Element;
declare namespace Popover {
    var displayName: string;
}

declare const classes$2: {
    base: string;
    size: {
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
    };
    rounded: {
        none: string;
        sm: string;
        md: string;
        lg: string;
        DEFAULT: string;
    };
    variant: {
        solid: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        flat: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
    };
};
interface ProgressbarProps extends React__default.HTMLAttributes<HTMLDivElement> {
    /** Percentage of filled bar */
    value?: number;
    /** Pass label to show percentage inside bar */
    label?: string;
    /** Size of the compoents are: */
    size?: keyof typeof classes$2.size;
    /** The rounded variants are: */
    rounded?: keyof typeof classes$2.rounded;
    /** Pass color variations */
    color?: keyof typeof classes$2.variant.flat.color;
    /** The variants of the components are: */
    variant?: keyof typeof classes$2.variant;
    /** To style entire progressbar component */
    className?: string;
    /** To style bar of the component */
    barClassName?: string;
    /** To style label */
    labelClassName?: string;
}
declare function Progressbar({ value, label, size, rounded, color, variant, className, barClassName, labelClassName, ...props }: ProgressbarProps): react_jsx_runtime.JSX.Element;
declare namespace Progressbar {
    var displayName: string;
}

declare const inputClasses: {
    base: string;
    size: {
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
    };
    variant: {
        outline: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        flat: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        active: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
    };
};
interface RadioProps extends Omit<React__default.InputHTMLAttributes<HTMLInputElement>, 'size'> {
    /** The variants of the component are: */
    variant?: keyof typeof inputClasses.variant;
    /** The size of the component. `"sm"` is equivalent to the dense input styling. */
    size?: keyof typeof inputClasses.size;
    /** Change radio button color */
    color?: keyof (typeof inputClasses.variant)['outline']['color'];
    /** Available directions of the label are: */
    labelPlacement?: 'start' | 'end';
    /** Whether the input is disabled */
    disabled?: boolean;
    /** Set field label */
    label?: React__default.ReactNode;
    /** Show error message using this prop */
    error?: string;
    /** Add helper text. It could be string or a React component */
    helperText?: React__default.ReactNode;
    /** Use className prop to apply style for entire component */
    className?: string;
    /** Use activeClassName prop to apply style on active component from radioGroup */
    activeClassName?: string;
    /** Use containerClassName prop to apply some additional style for label and radio container */
    containerClassName?: string;
    /** Use labelClassName prop to apply some addition style for the field label */
    labelClassName?: string;
    /** Add custom classes for the input filed extra style */
    inputClassName?: string;
    /** This prop allows you to customize the error message style */
    errorClassName?: string;
    /** This prop allows you to customize the helper message style */
    helperClassName?: string;
}
/**
 * A basic widget for getting the user input of radio. Here is the API documentation of the Radio component.
 * And the rest of the props of Checkbox are the same as the original html input field.
 * You can use props like `value`, `disabled`, `onChange`, `onFocus`, `onBlur` etc.
 */
declare const Radio: React__default.ForwardRefExoticComponent<RadioProps & React__default.RefAttributes<HTMLInputElement>>;

interface RadioGroupProps extends React__default.HTMLAttributes<HTMLDivElement> {
    /** Selected value */
    value: string;
    /** Pass function to select value */
    setValue: React__default.Dispatch<React__default.SetStateAction<string>>;
    /** Radio buttons as children */
    children: React__default.ReactNode;
}
/**
 * RadioGroup is a wrapper component for multiple radio buttons which allows
 * user to select any radio button easily either from a form or from a filter.
 * Here is the API documentation for RadioGroup component.
 */
declare function RadioGroup({ value, setValue, children, ...props }: RadioGroupProps): react_jsx_runtime.JSX.Element;
declare namespace RadioGroup {
    var displayName: string;
}

interface StepperProps extends React__default.HTMLAttributes<HTMLDivElement> {
    /** Index of currently active step */
    currentIndex?: number;
    /** Direction of stepper */
    direction?: 'horizontal' | 'vertical';
    /** Whether to show dot */
    dot?: boolean;
    /** Pass Step Component as children */
    children: React__default.ReactNode;
    /** Pass dotClassName to design the rounded disc */
    dotClassName?: string;
    /** Pass contentClassName to design the content area */
    contentClassName?: string;
    /** Pass titleClassName to design the label or title */
    titleClassName?: string;
    /** Pass descriptionClassName to design the description */
    descriptionClassName?: string;
}
/**
 * Stepper tool is used to enlighten user regarding the progress of the task.
 * `Stepper` component displays the progress of the task in a sequence of numbered steps through `Step` component.
 */
declare function Stepper({ currentIndex, children, direction, dot, className, titleClassName, dotClassName, contentClassName, descriptionClassName, }: StepperProps): react_jsx_runtime.JSX.Element;
declare namespace Stepper {
    var displayName: string;
}

declare const lineClasses: {
    base: string;
    top: {
        noDot: {
            sm: string;
            DEFAULT: string;
            lg: string;
        };
        dot: {
            sm: string;
            DEFAULT: string;
            lg: string;
        };
    };
    titleLine: string;
    color: {
        DEFAULT: string;
        primary: string;
        secondary: string;
        danger: string;
        info: string;
        success: string;
        warning: string;
    };
};
declare const circleClasses: {
    base: string;
    size: {
        sm: string;
        DEFAULT: string;
        lg: string;
    };
    waiting: string;
    variant: {
        solid: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        outline: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
    };
};
interface StepProps extends Omit<React__default.HTMLAttributes<HTMLDivElement>, 'title'> {
    /** Give a title for the step */
    title: React__default.ReactNode;
    /** Give a description for the step */
    description?: React__default.ReactNode;
    /** Pass custom icon */
    icon?: React__default.ReactNode;
    /** Index number for each component. Handled underneath by `Stepper` component */
    index?: number;
    /** Status of each step */
    status?: 'waiting' | 'in-progress' | 'completed' | 'error';
    /** The size of each Step */
    size?: keyof typeof circleClasses.size;
    /** The variants of the component are: */
    variant?: keyof typeof circleClasses.variant;
    /** Change Step Color */
    color?: keyof typeof lineClasses.color;
    /** Whether to show dot. Handled from `Stepper` component */
    dot?: boolean;
    /** Pass className to design the container */
    className?: string;
    /** Pass circleClassName to design the rounded disc */
    circleClassName?: string;
    /** Pass contentClassName to design the content area */
    contentClassName?: string;
    /** Pass titleClassName to design the label or title */
    titleClassName?: string;
    /** Pass descriptionClassName to design the description */
    descriptionClassName?: string;
}
declare function Step({ title, description, icon, index, status, size, variant, color, dot, className, circleClassName, contentClassName, titleClassName, descriptionClassName, }: StepProps): react_jsx_runtime.JSX.Element;
declare namespace Step {
    var displayName: string;
}

declare const labelClasses$1: {
    size: {
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
    };
    margin: {
        left: {
            sm: string;
            DEFAULT: string;
            lg: string;
            xl: string;
        };
        right: {
            sm: string;
            DEFAULT: string;
            lg: string;
            xl: string;
        };
    };
};
declare const switchClasses: {
    base: string;
    disabled: string;
    rounded: {
        none: string;
        sm: string;
        md: string;
        lg: string;
        pill: string;
    };
    size: {
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
    };
    variant: {
        active: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        flat: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        outline: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
    };
};
interface SwitchProps extends Omit<React__default.InputHTMLAttributes<HTMLInputElement>, 'size'> {
    /** Set field label */
    label?: React__default.ReactNode;
    /** Change label direction */
    labelPlacement?: keyof typeof labelClasses$1.margin;
    /** The rounded variants are: */
    rounded?: keyof typeof switchClasses.rounded;
    /** The size of the component. */
    size?: keyof typeof labelClasses$1.size;
    /** Whether the switch is disabled */
    disabled?: boolean;
    /** The variants of the component are: */
    variant?: keyof typeof switchClasses.variant;
    /** Change Switch color */
    color?: keyof (typeof switchClasses.variant)['flat']['color'];
    /** Set custom icon when the switch is on */
    onIcon?: React__default.ReactNode;
    /** Set custom icon when the switch is off */
    offIcon?: React__default.ReactNode;
    /** Add helper text. It could be string or a React component */
    helperText?: React__default.ReactNode;
    /** Show error message using this prop */
    error?: string;
    /** Add custom classes of component wrapper for extra style */
    className?: string;
    /** Add custom classes for switch label */
    labelClassName?: string;
    /** Add custom classes of switch wrapper for extra style */
    switchClassName?: string;
    /** Add custom classes of switch handler for extra style */
    handlerClassName?: string;
    /** This prop allows you to customize the error message style */
    errorClassName?: string;
    /** This prop allows you to customize the helper message style */
    helperClassName?: string;
}
/**
 * A basic widget for getting the user input. Here is the API documentation of the Switch component.
 * And the rest of the props are the same as the original html checkbox input field.
 * You can use props like `value`, `disabled`, `checked`, `onChange`, `onFocus`, `onBlur` etc.
 */
declare const Switch: React__default.ForwardRefExoticComponent<SwitchProps & React__default.RefAttributes<HTMLInputElement>>;

type TabsProps = ExtractProps<typeof Tab$1.Group>;
/**
 * We used tab component of `headless UI` to build it.
 * See their [documentation](https://headlessui.com/react/tabs) for more info.
 */
declare function Tabs({ vertical, className, children, ...props }: TabsProps): react_jsx_runtime.JSX.Element;
declare namespace Tabs {
    var displayName: string;
}

type TabListProps = ExtractProps<typeof Tab$1.List>;
type TabProps = ExtractProps<typeof Tab$1>;
type TabPanelsProps = ExtractProps<typeof Tab$1.Panels>;
type TabPanelProps = ExtractProps<typeof Tab$1.Panel>;
declare const TabList: typeof Tab$1.List;
declare const Tab: typeof Tab$1;
declare const TabPanels: typeof Tab$1.Panels;
declare const TabPanel: typeof Tab$1.Panel;

declare const classes$1: {
    base: string;
    size: {
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
    };
    rounded: {
        none: string;
        sm: string;
        DEFAULT: string;
        lg: string;
        pill: string;
    };
    variant: {
        flat: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        outline: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        solid: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
    };
};
interface TagProps extends React__default.HTMLAttributes<HTMLDivElement> {
    /** Size of the component */
    size?: keyof typeof classes$1.size;
    /** The rounded variants are: */
    rounded?: keyof typeof classes$1.rounded;
    /** These are the variants we support */
    variant?: keyof typeof classes$1.variant;
    /** Choose color variations */
    color?: keyof (typeof classes$1.variant)['flat']['color'];
    /** Pass content of tag as children */
    children?: React__default.ReactNode;
    /** Whether to clear tag */
    clearable?: boolean;
    /** Pass function to clear tag */
    onClear?(e: React__default.MouseEvent): void;
    /** Pass custom cancel icon */
    cancelIcon?: React__default.ReactNode;
    /** Pass className to customize tag design */
    className?: string;
    /** Pass iconClassName to design icon */
    iconClassName?: string;
}
/**
 * Tag component is used to convey grouping information of elements.
 * It is a standalone component which is commonly used for filtering or triggering some kind of action.
 * Here is the API documentation of Tag component.
 */
declare function Tag({ size, rounded, variant, color, children, clearable, onClear, cancelIcon, className, iconClassName, }: TagProps): react_jsx_runtime.JSX.Element;
declare namespace Tag {
    var displayName: string;
}

declare const labelClasses: {
    size: {
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
    };
};
declare const textareaClasses: {
    base: string;
    disabled: string;
    clearable: string;
    error: string;
    size: {
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
    };
    rounded: {
        none: string;
        sm: string;
        DEFAULT: string;
        lg: string;
        xl: string;
    };
    variant: {
        active: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        flat: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        outline: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        text: {
            base: string;
            color: {
                DEFAULT: string;
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
    };
};
interface TextareaProps extends React__default.DetailedHTMLProps<React__default.TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement> {
    /** Set custom rows */
    rows?: number;
    /** Set custom cols */
    cols?: number;
    /** Set custom max length of character */
    maxLength?: number;
    /** Whether the textarea is disabled */
    disabled?: boolean;
    /** Default value in textarea */
    children?: React__default.ReactNode;
    /** The size of the component. `"sm"` is equivalent to the dense input styling. */
    size?: keyof typeof labelClasses.size;
    /** The variants of the component are: */
    variant?: keyof typeof textareaClasses.variant;
    /** Change textarea color */
    color?: keyof (typeof textareaClasses.variant)['active']['color'];
    /** Set field label */
    label?: React__default.ReactNode;
    /** add clearable option */
    clearable?: boolean;
    /** clear event */
    onClear?: (event: React__default.MouseEvent) => void;
    /** The rounded variants are: */
    rounded?: keyof typeof textareaClasses.rounded;
    /** It is the password visibility toggle icon.  */
    renderCharacterCount?({ characterCount, maxLength, }: {
        characterCount?: number;
        maxLength?: number;
    }): React__default.ReactNode;
    /** Show error message using this prop */
    error?: string;
    /** Use labelClassName prop to do some addition style for the field label */
    labelClassName?: string;
    /** Add custom classes for the input filed extra style */
    textareaClassName?: string;
    /** This prop allows you to customize the helper message style */
    helperClassName?: string;
    /** This prop allows you to customize the error message style */
    errorClassName?: string;
    /** Add helper text. It could be string or a React component */
    helperText?: React__default.ReactNode;
}
/**
 * A basic widget for getting the user textarea. Here is the API documentation of the Textarea component.
 * And the rest of the props are the same as the original html textarea field.
 * You can use props like `disabled`, `placeholder`, `rows`, `cols`, `maxLength` etc.
 */
declare const Textarea: React__default.ForwardRefExoticComponent<Omit<TextareaProps, "ref"> & React__default.RefAttributes<HTMLTextAreaElement>>;

declare const titleStyles: {
    h1: string;
    h2: string;
    h3: string;
    h4: string;
    h5: string;
    h6: string;
};
type TitleProps = {
    as?: keyof typeof titleStyles;
    className?: string;
};
declare function Title({ as, children, className, }: React__default.PropsWithChildren<TitleProps>): react_jsx_runtime.JSX.Element;
declare namespace Title {
    var displayName: string;
}

declare const classes: {
    p: string;
    i: string;
    b: string;
    q: string;
    em: string;
    strong: string;
    small: string;
    span: string;
    del: string;
    mark: string;
    abbr: string;
    pre: string;
    code: string;
    kbd: string;
    blockquote: string;
    sub: string;
    sup: string;
};
type TextProps = {
    as?: keyof typeof classes;
    title?: string;
    className?: string;
};
declare function Text({ as, title, children, className, }: React__default.PropsWithChildren<TextProps>): react_jsx_runtime.JSX.Element;
declare namespace Text {
    var displayName: string;
}

export { ActionIcon, ActionIconProps, AdvancedCheckbox, AdvancedCheckboxProps, AdvancedRadio, AdvancedRadioProps, Alert, AlertProps, Announcement, AnnouncementProps, Avatar, AvatarProps, Badge, BadgeProps, Button, ButtonProps, Checkbox, CheckboxGroup, CheckboxGroupProps, CheckboxProps, Collapse, CollapseHeader, CollapseProps, Drawer, DrawerProps, DrawerSize, Dropdown, DropdownItem, DropdownItemProps, DropdownItemRenderProps, DropdownProps, Empty, EmptyBoxIcon, EmptyProductBoxIcon, EmptyProps, FieldClearButton, FieldClearButtonProps, FieldError, FieldHelperText, FieldHelperTextProps, FileInput, FileInputProps, Input, InputProps, Loader, LoaderTypes, Modal, ModalProps, ModalSize, NativeSelect, NativeSelectProps, NumberInput, NumberInputProps, OptionType, Password, PasswordProps, PinCode, PinCodeProps, Popover, PopoverProps, Progressbar, ProgressbarProps, Radio, RadioGroup, RadioGroupProps, RadioProps, SearchNotFoundIcon, Step, StepProps, Stepper, StepperProps, Switch, SwitchProps, Tab, TabList, TabListProps, TabPanel, TabPanelProps, TabPanels, TabPanelsProps, TabProps, Tabs, TabsProps, Tag, TagProps, Text, TextProps, Textarea, TextareaProps, Title, TitleProps, Tooltip, TooltipProps, cn, useCollapse };
